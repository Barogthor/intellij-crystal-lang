/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.kenro.ji.jin.crystal.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static net.kenro.ji.jin.crystal.psi.CrystalElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>src/main/java/net/kenro/ji/jin/crystal/lexer/Crystal.flex</tt>
 */
public class _CrystalLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15760 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\2\21\1\26\1\57\1\60\5\21\2\26"+
    "\1\61\7\21\1\26\1\62\20\21\1\26\1\63\1\21\1\64\40\21\1\65\5\21\1\66\13\21"+
    "\1\67\1\70\10\21\1\71\2\21\1\72\10\21\123\26\1\73\7\26\1\74\1\75\12\26\1\76"+
    "\24\21\1\26\1\77\u0702\21");

  /* The ZZ_CMAP_Y table has 4096 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\20\1\21\1\22\1\23\1\22\2\24\1\25\1\26\2\27\1\30\1\27\7\31\2\32\1\33"+
    "\5\31\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\32\1\47\2\31"+
    "\1\35\7\31\1\50\1\51\1\52\1\31\10\27\1\53\4\27\1\54\1\55\1\24\1\56\1\20\1"+
    "\57\1\60\12\20\1\61\5\20\1\62\1\63\1\64\1\65\1\54\1\24\1\66\1\67\3\27\1\70"+
    "\1\71\3\31\1\72\1\73\6\24\6\27\4\31\1\74\1\75\6\31\1\76\1\77\14\31\1\100\3"+
    "\24\1\25\1\101\1\102\4\27\11\20\3\24\2\103\5\20\5\24\1\103\2\20\1\24\1\104"+
    "\1\100\13\24\1\105\1\20\1\106\1\107\1\24\1\110\2\20\1\111\3\24\3\20\1\112"+
    "\12\24\1\113\1\20\1\101\1\20\5\24\1\103\1\114\1\115\2\24\1\113\1\115\1\116"+
    "\1\117\2\20\3\24\1\117\10\20\2\24\1\120\11\20\1\121\6\24\1\122\2\20\1\117"+
    "\1\24\1\104\1\24\1\100\1\24\1\123\1\110\1\124\2\24\1\111\1\125\1\122\1\20"+
    "\1\64\1\20\1\126\1\104\1\24\1\56\1\20\1\112\1\127\1\124\2\24\1\111\1\130\1"+
    "\56\3\20\1\131\1\107\1\24\1\132\1\20\1\112\1\133\1\66\2\24\1\111\1\134\1\122"+
    "\2\20\1\117\1\20\1\104\1\24\1\20\1\101\1\112\1\110\1\124\2\24\1\111\1\134"+
    "\1\122\3\20\1\126\1\104\1\24\1\101\1\20\1\135\1\136\1\137\1\140\1\141\1\136"+
    "\1\24\1\56\2\20\1\117\1\20\1\107\1\24\2\20\1\112\1\142\1\111\2\24\1\111\1"+
    "\24\1\122\3\20\1\103\1\104\1\24\2\20\1\112\1\142\1\111\2\24\1\111\1\143\1"+
    "\122\3\20\1\64\1\104\1\24\1\144\1\20\1\112\1\142\1\111\4\24\1\145\1\20\1\64"+
    "\1\20\1\146\1\104\1\24\1\20\1\147\1\112\1\24\1\25\1\147\2\24\1\66\1\105\1"+
    "\25\3\20\1\107\1\24\2\20\1\100\5\24\1\150\1\20\1\25\1\20\1\24\1\56\4\20\1"+
    "\151\1\152\1\121\1\100\1\153\1\154\1\150\1\155\1\156\1\20\1\24\1\157\4\20"+
    "\1\117\3\20\1\24\1\56\2\20\1\24\1\100\3\24\1\120\3\20\1\120\16\20\5\24\1\103"+
    "\1\20\1\146\1\24\1\56\1\113\1\160\1\161\1\107\1\123\1\24\1\56\1\64\1\24\1"+
    "\56\4\24\1\133\1\155\5\24\1\162\51\24\1\137\1\25\1\137\5\24\1\137\4\24\1\137"+
    "\1\25\1\137\1\24\1\25\7\24\1\137\10\24\1\103\4\20\2\24\2\20\12\24\1\113\1"+
    "\163\1\100\114\24\1\110\2\24\1\164\2\24\1\103\11\24\1\103\1\100\1\117\1\24"+
    "\1\142\1\56\1\20\2\24\1\56\1\20\2\24\1\56\1\20\1\24\1\142\1\117\1\20\6\24"+
    "\1\165\3\20\1\146\1\116\1\24\1\56\4\20\1\24\1\56\13\24\1\20\5\24\1\166\10"+
    "\24\1\113\1\20\3\24\1\25\4\20\1\107\4\24\1\113\1\120\1\20\5\24\1\165\3\24"+
    "\1\56\1\24\1\56\4\20\2\24\1\25\1\20\6\24\1\120\5\20\1\24\1\56\1\24\1\56\1"+
    "\146\13\20\1\112\5\24\1\165\1\20\1\112\1\165\1\24\1\56\4\20\1\167\3\24\1\117"+
    "\1\107\6\24\1\113\3\20\4\24\1\165\3\20\1\24\1\170\5\24\1\113\15\20\1\171\1"+
    "\172\1\20\30\27\10\20\22\31\1\173\1\174\14\31\1\27\1\24\1\163\1\113\1\27\1"+
    "\24\1\27\1\24\1\163\1\113\1\27\1\175\1\27\1\24\1\27\1\163\1\27\1\24\1\27\1"+
    "\24\1\27\1\24\1\176\1\177\1\200\1\120\1\201\1\165\1\27\1\120\1\200\1\120\1"+
    "\202\1\203\3\20\1\204\5\20\1\205\2\20\1\206\1\207\2\20\1\27\1\57\14\20\1\210"+
    "\1\211\1\212\1\213\1\60\1\214\1\215\1\216\1\217\1\220\4\20\2\221\1\222\151"+
    "\20\3\221\1\223\42\20\5\24\1\25\5\27\1\30\1\224\1\225\1\226\1\227\14\31\1"+
    "\230\1\231\1\232\1\20\4\27\1\233\1\23\7\24\1\146\2\20\2\24\1\25\1\20\10\25"+
    "\11\20\1\146\72\20\1\234\5\20\1\213\1\141\1\100\11\24\1\25\1\112\1\100\12"+
    "\24\1\162\1\112\4\24\1\113\1\100\12\24\1\25\2\20\3\24\1\103\6\20\170\24\1"+
    "\113\11\20\72\24\1\113\5\20\21\24\1\120\10\20\5\24\1\113\41\24\1\120\3\24"+
    "\1\165\2\20\5\31\1\235\1\20\1\146\3\31\1\236\10\24\1\113\5\20\1\146\1\24\1"+
    "\75\1\31\1\33\7\31\1\27\1\237\1\31\1\240\1\241\2\31\1\242\1\243\7\20\1\146"+
    "\1\244\1\245\1\162\2\24\1\103\3\20\6\24\1\165\1\20\1\147\5\24\1\165\3\20\1"+
    "\24\1\56\2\20\1\147\1\246\4\24\1\113\1\20\2\24\1\25\3\20\3\24\1\120\1\121"+
    "\5\24\1\103\2\20\1\146\1\24\1\56\1\142\2\24\1\25\5\24\1\117\2\20\1\162\1\165"+
    "\1\24\1\56\2\24\1\25\1\247\6\24\1\161\1\213\1\166\2\20\1\250\1\24\1\103\1"+
    "\132\1\20\3\251\1\20\2\25\5\27\1\252\1\163\1\20\12\27\4\24\1\103\1\20\1\24"+
    "\1\56\64\24\1\165\1\20\2\24\1\25\1\167\5\24\1\165\40\20\55\24\1\113\15\24"+
    "\1\56\4\20\1\30\1\20\1\253\1\254\1\24\1\111\1\25\1\156\1\255\15\24\1\56\3"+
    "\20\1\167\54\24\1\113\2\20\10\24\1\147\6\24\5\20\1\24\1\165\16\20\1\142\20"+
    "\24\1\120\2\20\1\24\1\56\1\100\2\24\1\103\1\102\2\27\1\256\1\107\12\24\1\25"+
    "\3\147\1\132\4\20\1\24\1\143\2\24\1\25\2\24\1\257\1\24\1\113\1\24\1\113\4"+
    "\20\17\24\1\103\60\20\3\24\1\120\6\24\1\117\5\20\4\24\2\20\2\24\1\111\1\56"+
    "\4\24\1\113\1\20\3\24\1\113\4\24\1\165\1\24\6\20\5\24\5\27\11\24\1\113\1\24"+
    "\1\56\12\20\5\24\1\20\6\24\1\165\23\20\46\24\1\25\1\20\2\24\1\113\1\20\1\24"+
    "\23\20\1\113\1\111\4\24\1\133\1\260\2\24\1\113\1\20\2\24\1\25\1\20\3\24\1"+
    "\25\10\20\2\24\1\261\1\20\2\24\1\113\1\20\3\24\1\56\10\20\7\24\1\107\10\20"+
    "\1\117\1\20\1\143\1\100\2\24\1\165\5\20\3\24\1\120\3\24\1\120\4\20\1\24\1"+
    "\100\2\24\1\120\3\20\6\24\1\113\1\20\2\24\1\113\1\20\2\24\1\103\1\20\2\24"+
    "\1\56\15\20\11\24\1\117\6\20\6\24\1\103\1\20\6\27\1\256\41\20\1\167\6\24\5"+
    "\20\1\107\1\24\2\20\1\167\5\24\4\20\3\24\1\117\1\24\1\56\1\167\3\24\1\25\1"+
    "\20\1\107\1\24\2\20\4\24\1\262\1\20\1\167\5\24\1\103\1\20\1\263\1\20\1\24"+
    "\1\264\4\20\2\24\1\66\2\24\1\165\12\20\1\25\1\265\1\24\1\133\1\24\1\117\5"+
    "\24\1\25\2\20\1\24\1\56\1\112\1\110\1\124\2\24\1\111\1\134\1\122\2\20\1\117"+
    "\1\112\1\56\43\20\6\24\2\20\1\126\1\20\1\24\1\56\24\20\5\24\1\25\5\20\1\165"+
    "\4\20\6\24\2\20\1\116\1\20\1\24\1\56\4\20\5\24\1\103\2\20\1\24\1\56\6\20\3"+
    "\24\1\56\2\20\1\24\1\56\54\20\4\24\4\27\1\24\1\56\1\20\1\146\70\20\7\24\1"+
    "\117\40\20\63\24\1\56\34\20\30\24\1\165\27\20\5\24\1\25\72\20\10\24\1\25\67"+
    "\20\7\24\1\117\3\24\1\25\1\24\1\56\14\20\3\24\1\113\2\20\6\24\2\20\1\165\1"+
    "\20\1\24\1\56\1\167\2\24\1\112\2\24\56\20\10\24\1\120\1\20\1\117\7\20\1\167"+
    "\1\24\14\20\1\56\77\20\15\24\1\103\1\24\1\120\1\24\1\117\1\24\1\56\54\20\3"+
    "\24\1\266\2\27\1\267\2\24\1\270\1\176\2\27\3\24\1\266\2\27\1\271\1\272\1\171"+
    "\1\270\1\273\1\274\1\27\3\24\1\266\2\27\1\275\1\276\1\142\1\277\3\27\1\300"+
    "\1\156\1\147\1\301\2\27\1\267\2\24\1\270\3\27\3\24\1\266\2\27\1\267\2\24\1"+
    "\270\3\27\3\24\1\266\2\27\1\267\2\24\1\270\3\27\3\24\1\266\2\27\1\163\3\24"+
    "\1\301\2\27\1\252\1\302\2\24\1\303\2\27\1\176\1\267\2\24\1\277\2\27\1\30\1"+
    "\227\2\24\1\25\3\27\1\304\3\24\1\301\2\27\1\252\1\305\36\24\1\120\47\20\1"+
    "\143\3\24\1\151\1\100\1\162\1\306\1\210\1\307\1\151\1\175\1\151\2\162\1\131"+
    "\1\24\1\66\1\24\1\165\1\310\1\66\1\24\1\165\50\20\32\24\1\25\5\20\106\24\1"+
    "\120\1\20\33\24\1\113\120\24\1\56\53\20\3\24\1\113\74\20");

  /* The ZZ_CMAP_A table has 1608 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\20\1\1\1\2\2\1\1\2\5\20\5\0\1\1\1\36\1\20\1\3\1\60\1\44\1\55\1\6\1\23"+
    "\1\24\1\42\1\40\1\31\1\41\1\30\1\43\1\103\7\17\2\10\1\54\1\53\1\37\1\32\1"+
    "\34\1\52\1\57\16\13\1\15\10\13\1\11\2\13\1\25\1\33\1\26\1\56\1\5\1\0\1\62"+
    "\1\75\1\61\1\46\1\51\1\64\1\76\1\72\1\66\1\14\1\102\1\50\1\45\1\65\1\16\1"+
    "\77\1\70\1\67\1\63\1\74\1\47\1\101\1\71\1\12\1\73\1\100\1\21\1\27\1\22\1\35"+
    "\6\0\1\1\12\0\1\1\11\0\1\7\12\0\1\7\2\0\17\6\1\0\7\6\20\7\1\0\1\6\1\7\1\6"+
    "\1\7\1\6\1\7\1\6\2\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\2\7\1\6\1\7\1\6\1\7\1\6\1"+
    "\7\2\6\1\7\1\6\1\7\1\6\3\7\2\6\1\7\1\6\1\7\2\6\1\7\3\6\2\7\4\6\1\7\2\6\1\7"+
    "\3\6\3\7\2\6\1\7\2\6\1\7\1\6\1\7\1\6\1\7\2\6\1\7\1\6\2\7\1\6\1\7\2\6\1\7\3"+
    "\6\1\7\1\6\1\7\2\6\2\7\2\6\3\7\6\6\1\7\2\6\1\7\2\6\1\7\1\6\1\7\1\6\1\7\1\6"+
    "\1\7\1\6\2\7\1\6\1\7\1\6\1\7\1\6\7\7\2\6\1\7\2\6\2\7\1\6\1\7\4\6\5\7\1\6\4"+
    "\7\7\6\2\7\4\0\4\6\6\0\5\7\7\0\1\6\1\0\1\6\6\0\1\4\2\0\1\6\1\7\1\6\1\7\1\6"+
    "\1\0\1\6\1\7\2\0\4\7\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\11\6\13\7"+
    "\1\6\2\7\3\6\7\7\1\6\1\7\1\0\1\6\1\7\2\6\2\7\4\6\1\7\10\0\1\6\1\7\1\6\1\7"+
    "\1\6\1\7\2\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\7\1\6\2\7\1\0\7\6\1"+
    "\0\1\6\7\0\7\7\3\6\5\0\2\6\4\0\6\6\1\0\1\6\7\0\2\6\7\0\7\6\2\0\2\6\1\0\6\6"+
    "\5\0\11\6\6\0\2\6\4\0\1\6\11\0\1\6\3\0\1\6\7\0\5\6\7\0\6\6\3\0\1\6\2\0\1\6"+
    "\4\0\4\6\2\0\6\6\1\0\1\6\3\0\2\6\4\0\2\6\1\0\4\6\4\0\2\6\1\0\2\6\1\0\2\6\2"+
    "\0\4\6\1\0\1\6\3\0\3\6\3\0\6\6\1\0\2\6\1\0\2\6\1\0\3\6\3\0\1\6\1\0\6\6\3\0"+
    "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\5\6\1\0\6\6\1\0\3\6\1\0\2"+
    "\6\5\0\3\6\2\0\1\6\11\0\1\6\2\0\7\6\1\0\2\6\5\0\2\6\1\0\1\6\2\0\2\6\1\0\1"+
    "\6\2\0\1\6\3\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\5\0\1\6\2\0\5\6\1\0\1\6"+
    "\1\0\2\6\2\0\4\6\2\0\4\6\3\0\1\6\3\0\2\6\1\0\3\6\1\0\4\6\6\7\2\0\1\1\13\6"+
    "\4\0\1\6\1\0\1\6\10\0\7\6\3\0\3\6\1\0\4\6\1\0\4\6\3\0\2\6\1\0\1\6\1\7\1\6"+
    "\1\7\1\6\11\7\1\6\1\7\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\5\7\1\0\2\7\5\6\1\0"+
    "\1\7\3\0\3\7\1\0\6\7\2\0\2\7\13\1\5\0\2\1\5\0\1\1\7\0\1\1\1\0\1\7\15\0\1\7"+
    "\2\0\1\6\4\0\1\6\2\0\1\7\3\6\2\7\3\6\1\7\1\0\1\6\3\0\5\6\2\0\1\6\1\0\4\6\1"+
    "\0\1\7\4\6\1\7\4\6\1\7\2\0\2\7\2\6\5\0\1\6\4\7\4\0\1\7\1\0\10\4\3\0\1\6\1"+
    "\7\3\0\2\4\6\0\1\6\1\7\3\6\2\7\1\6\1\7\1\6\1\7\1\6\1\7\4\6\1\7\1\6\2\7\1\6"+
    "\10\7\3\6\1\7\1\6\2\7\6\0\1\6\1\7\1\6\1\7\3\0\1\6\1\7\4\0\6\7\1\0\1\7\1\1"+
    "\4\0\2\6\1\0\1\6\1\7\1\6\1\7\1\6\1\7\1\6\1\0\1\6\1\7\1\6\3\7\2\0\1\7\1\6\1"+
    "\7\1\6\1\7\2\6\1\7\1\6\2\0\1\6\1\7\1\6\1\7\2\6\1\7\1\6\3\7\1\6\1\7\1\6\1\7"+
    "\4\6\2\0\5\6\1\7\1\6\4\7\7\6\1\0\3\6\1\0\1\6\3\0\1\6\1\0\1\6\4\0\1\6\3\0\2"+
    "\6\3\0\3\6\3\0\6\6\1\0\3\7\1\0\4\7\3\0\5\7\5\0\1\6\1\0\3\6\1\0\2\6\1\0\2\6"+
    "\3\7\5\0\3\6\1\0\2\6\1\0\2\6\3\0\1\6\2\0\4\6\1\0\2\6\2\0\3\6\3\0\1\6\2\0\4"+
    "\6\3\0\3\6\1\0\1\6\3\0\1\6\1\0\4\6\1\0\3\6\12\7\12\6\6\7\1\6\1\0\2\6\2\0\1"+
    "\6\2\0\2\6\1\0\2\7\1\0\1\7\1\0\7\7\1\0\7\7\2\6\1\0\4\6\2\0\10\6\1\0\2\7\2"+
    "\6\1\0\4\6\1\0\1\6\1\0\10\7\11\6\1\0\5\7\1\0\10\7\1\6\1\7\2\0\2\6\1\0\1\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\6\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\5\4\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\1\14\4\1\37\1\5\1\4"+
    "\1\40\1\4\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\2\4\1\72\11\4\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\5\4\1\102\20\4"+
    "\1\103\1\104\24\4\2\0\1\105\1\4\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\2\4"+
    "\1\117\6\4\1\120\4\4\1\121\3\4\1\122\7\4"+
    "\1\123\1\124\3\4\1\125\12\4\1\126\1\127\2\4"+
    "\1\130\1\131\40\4\2\5\1\132\6\4\1\133\1\4"+
    "\1\134\1\4\1\135\1\136\1\4\1\137\1\4\1\140"+
    "\1\4\1\141\2\4\1\142\2\4\1\143\10\4\1\144"+
    "\12\4\1\145\1\4\1\146\1\147\11\4\1\150\1\4"+
    "\1\151\1\152\1\153\1\4\1\154\1\155\1\4\1\156"+
    "\1\157\1\4\1\160\4\4\1\161\1\4\1\162\1\4"+
    "\1\163\1\164\1\165\6\4\1\166\1\167\1\4\1\170"+
    "\3\4\1\171\1\4\1\172\1\4\1\173\2\4\1\174"+
    "\1\175\1\4\1\176\1\4\1\177\1\4\1\200\1\201"+
    "\4\4\1\202\3\4\1\203\2\4\1\204\1\205\10\4"+
    "\1\206\1\207\1\4\1\210\1\4\1\211\1\4\1\212"+
    "\6\4\1\213\1\4\1\214\3\4\1\215\1\216\1\217"+
    "\1\220\1\221\3\4\1\222\1\4\1\223\1\224\1\4"+
    "\1\225\1\226\1\4\1\227\5\4\1\230\1\4\1\231"+
    "\1\4\1\232\2\4\1\233\4\4\1\234\6\4\1\235"+
    "\2\4\1\236\1\237\1\240\4\4\1\241\1\4\1\242"+
    "\4\4\1\243\1\244\4\4\1\245\1\246\3\4\1\247"+
    "\1\250\4\4\1\251\7\4\1\252\1\253\1\4\1\254"+
    "\1\255\6\4\1\256\2\4\1\257\13\4\1\260\7\4"+
    "\1\261\2\4\1\262\1\4\1\263\1\4\1\264\1\265";

  private static int [] zzUnpackAction() {
    int [] result = new int[517];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\104"+
    "\0\u01dc\0\u0220\0\104\0\104\0\u0264\0\104\0\u02a8\0\u02ec"+
    "\0\104\0\u0330\0\u0374\0\u03b8\0\104\0\u03fc\0\u0440\0\u0484"+
    "\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4"+
    "\0\u06e8\0\104\0\104\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0110"+
    "\0\u0c7c\0\104\0\104\0\104\0\u0cc0\0\u0d04\0\104\0\u0d48"+
    "\0\u0d8c\0\104\0\104\0\104\0\104\0\u0dd0\0\104\0\104"+
    "\0\u0e14\0\u0e58\0\104\0\104\0\104\0\104\0\u0e9c\0\104"+
    "\0\104\0\104\0\u0ee0\0\u0f24\0\u0110\0\u0f68\0\u0fac\0\u0ff0"+
    "\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\104\0\104"+
    "\0\u11cc\0\104\0\104\0\104\0\104\0\u1210\0\u1254\0\u1298"+
    "\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8"+
    "\0\u171c\0\u1760\0\u17a4\0\u0110\0\u17e8\0\u182c\0\u1870\0\u18b4"+
    "\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4"+
    "\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4"+
    "\0\u1d38\0\u1d7c\0\u1dc0\0\u0110\0\u1e04\0\104\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\u1e48\0\u1e8c"+
    "\0\u0110\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u0110"+
    "\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u0110\0\u2178\0\u21bc\0\u2200"+
    "\0\104\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc"+
    "\0\u0110\0\104\0\u2420\0\u2464\0\u24a8\0\u0110\0\u24ec\0\u2530"+
    "\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750"+
    "\0\u2794\0\u0110\0\u27d8\0\u281c\0\u0110\0\u2860\0\u28a4\0\u28e8"+
    "\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08"+
    "\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28"+
    "\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48"+
    "\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u1d7c\0\u1dc0"+
    "\0\u0110\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u0110"+
    "\0\u32bc\0\u0110\0\u3300\0\u0110\0\u3344\0\u3388\0\u0110\0\u33cc"+
    "\0\u0110\0\u3410\0\u0110\0\u3454\0\u3498\0\u0110\0\u34dc\0\u3520"+
    "\0\u0110\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc"+
    "\0\u3740\0\u0110\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8"+
    "\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u0110\0\u3a2c\0\u0110\0\104"+
    "\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c"+
    "\0\u3c90\0\u0110\0\u3cd4\0\u0110\0\u0110\0\u0110\0\u3d18\0\u0110"+
    "\0\u0110\0\u3d5c\0\u0110\0\u0110\0\u3da0\0\u3de4\0\u3e28\0\u3e6c"+
    "\0\u3eb0\0\u3ef4\0\u0110\0\u3f38\0\u0110\0\u3f7c\0\u0110\0\u0110"+
    "\0\u0110\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114\0\u0110"+
    "\0\u0110\0\u4158\0\u0110\0\u419c\0\u41e0\0\u4224\0\104\0\u4268"+
    "\0\u0110\0\u42ac\0\u0110\0\u42f0\0\u4334\0\u0110\0\u0110\0\u4378"+
    "\0\u0110\0\u43bc\0\u0110\0\u4400\0\u0110\0\u0110\0\u4444\0\u4488"+
    "\0\u44cc\0\u4510\0\u0110\0\u4554\0\u4598\0\u45dc\0\u0110\0\u4620"+
    "\0\u4664\0\u0110\0\104\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8"+
    "\0\u47fc\0\u4840\0\u4884\0\u0110\0\u0110\0\u48c8\0\u0110\0\u490c"+
    "\0\u0110\0\u4950\0\u0110\0\u4994\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4"+
    "\0\u4ae8\0\u4b2c\0\u4b70\0\u0110\0\u4bb4\0\u4bf8\0\u4c3c\0\u0110"+
    "\0\u0110\0\u0110\0\u4c80\0\u0110\0\u4cc4\0\u4d08\0\u4d4c\0\u0110"+
    "\0\u4d90\0\u0110\0\u0110\0\u4dd4\0\u0110\0\u0110\0\u4e18\0\u0110"+
    "\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28\0\u4f6c\0\u0110\0\u4fb0\0\u0110"+
    "\0\u4ff4\0\u0110\0\u5038\0\u507c\0\u0110\0\u50c0\0\u5104\0\u5148"+
    "\0\u518c\0\u0110\0\u51d0\0\u5214\0\u5258\0\u529c\0\u52e0\0\u5324"+
    "\0\u0110\0\u5368\0\u53ac\0\u0110\0\u0110\0\u0110\0\u53f0\0\u5434"+
    "\0\u5478\0\u54bc\0\u0110\0\u5500\0\u0110\0\u5544\0\u5588\0\u55cc"+
    "\0\u5610\0\u0110\0\u0110\0\u5654\0\u5698\0\u56dc\0\u5720\0\u0110"+
    "\0\u0110\0\u5764\0\u57a8\0\u57ec\0\u0110\0\u5830\0\u5874\0\u58b8"+
    "\0\u58fc\0\u5940\0\u0110\0\u5984\0\u59c8\0\u5a0c\0\u5a50\0\u5a94"+
    "\0\u5ad8\0\u5b1c\0\u0110\0\u0110\0\u5b60\0\u0110\0\u0110\0\u5ba4"+
    "\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u0110\0\u5d3c\0\u5d80"+
    "\0\u0110\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18\0\u5f5c"+
    "\0\u5fa0\0\u5fe4\0\u6028\0\u606c\0\u0110\0\u60b0\0\u60f4\0\u6138"+
    "\0\u617c\0\u61c0\0\u6204\0\u6248\0\u0110\0\u628c\0\u62d0\0\u0110"+
    "\0\u6314\0\u0110\0\u6358\0\u0110\0\u0110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[517];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\2\5\1\2\1\5\1\6\1\2"+
    "\1\5\1\2\1\5\1\2\1\7\1\6\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\5\1\60"+
    "\1\5\1\61\1\62\1\63\1\64\1\65\3\5\1\66"+
    "\105\0\2\3\101\0\2\4\1\0\101\4\5\0\13\5"+
    "\25\0\5\5\7\0\23\5\10\0\1\6\6\0\1\6"+
    "\63\0\1\6\5\0\13\5\25\0\2\5\1\67\2\5"+
    "\7\0\3\5\1\70\12\5\1\71\4\5\21\0\1\72"+
    "\22\0\1\73\61\0\1\74\107\0\1\75\104\0\1\76"+
    "\2\0\1\77\101\0\1\100\105\0\1\101\1\0\1\102"+
    "\1\103\101\0\1\104\102\0\1\105\1\0\1\106\101\0"+
    "\1\107\2\0\1\110\100\0\1\111\4\0\1\112\76\0"+
    "\1\113\103\0\1\114\1\0\1\115\101\0\1\116\7\0"+
    "\1\117\73\0\1\120\73\0\1\121\7\0\1\122\56\0"+
    "\11\5\1\123\1\5\25\0\5\5\7\0\1\5\1\124"+
    "\21\5\5\0\11\5\1\125\1\5\25\0\4\5\1\126"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\7\0\4\5"+
    "\1\127\16\5\5\0\11\5\1\130\1\5\25\0\5\5"+
    "\7\0\1\5\1\131\3\5\1\132\15\5\5\0\5\5"+
    "\1\133\5\5\25\0\3\5\1\134\1\5\7\0\4\5"+
    "\1\135\13\5\1\136\2\5\54\0\1\137\61\0\1\140"+
    "\22\0\1\141\60\0\1\142\76\0\1\143\113\0\1\144"+
    "\14\0\1\145\36\0\13\5\25\0\3\5\1\146\1\5"+
    "\7\0\1\5\1\147\7\5\1\150\11\5\5\0\13\5"+
    "\25\0\2\5\1\151\1\152\1\5\7\0\2\5\1\153"+
    "\10\5\1\154\1\155\6\5\5\0\13\5\25\0\2\5"+
    "\1\156\1\157\1\160\7\0\5\5\1\161\1\162\3\5"+
    "\1\163\1\164\2\5\1\165\4\5\5\0\11\5\1\166"+
    "\1\5\25\0\2\5\1\167\2\5\7\0\1\5\1\170"+
    "\21\5\5\0\13\5\25\0\4\5\1\171\7\0\5\5"+
    "\1\172\15\5\5\0\13\5\25\0\5\5\7\0\2\5"+
    "\1\173\1\174\1\175\6\5\1\176\7\5\5\0\13\5"+
    "\25\0\4\5\1\177\7\0\1\5\1\200\21\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\5\1\201\3\5\1\202"+
    "\3\5\1\203\11\5\5\0\13\5\25\0\5\5\7\0"+
    "\5\5\1\204\15\5\5\0\13\5\25\0\4\5\1\205"+
    "\7\0\6\5\1\206\2\5\1\207\1\210\10\5\5\0"+
    "\13\5\25\0\4\5\1\211\7\0\5\5\1\212\1\213"+
    "\14\5\5\0\13\5\25\0\3\5\1\214\1\215\7\0"+
    "\2\5\1\216\20\5\5\0\11\5\1\217\1\5\25\0"+
    "\2\5\1\220\2\5\7\0\6\5\1\221\14\5\10\0"+
    "\1\6\2\222\2\0\2\223\1\6\63\0\1\6\5\0"+
    "\13\5\25\0\5\5\7\0\13\5\1\224\7\5\5\0"+
    "\13\5\25\0\4\5\1\225\7\0\23\5\32\0\1\226"+
    "\17\0\1\227\63\0\1\230\101\0\1\231\105\0\1\232"+
    "\103\0\1\233\105\0\1\234\101\0\1\235\103\0\1\236"+
    "\56\0\13\5\25\0\1\5\1\237\3\5\7\0\23\5"+
    "\5\0\13\5\25\0\5\5\7\0\1\240\22\5\5\0"+
    "\13\5\25\0\5\5\7\0\3\5\1\241\17\5\5\0"+
    "\13\5\25\0\5\5\7\0\5\5\1\242\5\5\1\243"+
    "\7\5\5\0\11\5\1\244\1\5\25\0\5\5\7\0"+
    "\1\245\1\246\21\5\5\0\13\5\25\0\1\247\4\5"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\7\0\14\5"+
    "\1\250\6\5\5\0\13\5\25\0\4\5\1\251\7\0"+
    "\5\5\1\252\5\5\1\253\7\5\5\0\13\5\25\0"+
    "\5\5\7\0\2\5\1\254\20\5\5\0\13\5\25\0"+
    "\1\5\1\255\1\256\2\5\7\0\2\5\1\257\20\5"+
    "\5\0\13\5\25\0\5\5\7\0\1\5\1\260\21\5"+
    "\32\0\1\261\56\0\13\5\25\0\5\5\7\0\1\5"+
    "\1\262\21\5\5\0\13\5\25\0\3\5\1\263\1\5"+
    "\7\0\2\5\1\264\10\5\1\265\7\5\5\0\11\5"+
    "\1\266\1\5\25\0\5\5\7\0\23\5\5\0\13\5"+
    "\25\0\5\5\7\0\13\5\1\267\7\5\5\0\13\5"+
    "\25\0\5\5\7\0\5\5\1\270\15\5\5\0\13\5"+
    "\25\0\1\271\4\5\1\272\6\0\23\5\5\0\1\273"+
    "\12\5\25\0\5\5\7\0\23\5\5\0\11\5\1\274"+
    "\1\5\25\0\5\5\7\0\2\5\1\275\20\5\5\0"+
    "\13\5\25\0\5\5\7\0\14\5\1\276\1\5\1\277"+
    "\4\5\5\0\13\5\25\0\4\5\1\300\7\0\23\5"+
    "\5\0\13\5\25\0\3\5\1\301\1\5\7\0\13\5"+
    "\1\302\7\5\5\0\13\5\25\0\5\5\7\0\17\5"+
    "\1\303\3\5\5\0\13\5\25\0\5\5\7\0\1\5"+
    "\1\304\21\5\5\0\13\5\25\0\5\5\7\0\2\5"+
    "\1\305\20\5\5\0\13\5\25\0\5\5\7\0\6\5"+
    "\1\306\14\5\5\0\13\5\25\0\5\5\7\0\1\5"+
    "\1\307\4\5\1\310\14\5\5\0\13\5\25\0\5\5"+
    "\7\0\6\5\1\311\14\5\5\0\13\5\25\0\5\5"+
    "\7\0\4\5\1\312\16\5\5\0\13\5\25\0\3\5"+
    "\1\313\1\5\7\0\5\5\1\314\15\5\5\0\13\5"+
    "\25\0\5\5\7\0\10\5\1\315\12\5\5\0\13\5"+
    "\25\0\3\5\1\316\1\5\7\0\23\5\5\0\1\317"+
    "\12\5\25\0\5\5\7\0\23\5\5\0\13\5\25\0"+
    "\5\5\7\0\1\320\1\5\1\321\2\5\1\322\15\5"+
    "\5\0\13\5\25\0\4\5\1\323\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\5\1\324\1\325\4\5"+
    "\1\326\3\5\1\327\7\5\5\0\13\5\25\0\5\5"+
    "\7\0\4\5\1\330\1\331\15\5\5\0\13\5\25\0"+
    "\5\5\7\0\6\5\1\332\14\5\5\0\13\5\25\0"+
    "\5\5\7\0\13\5\1\333\7\5\5\0\13\5\25\0"+
    "\4\5\1\334\7\0\23\5\5\0\13\5\25\0\4\5"+
    "\1\335\7\0\23\5\5\0\13\5\25\0\5\5\7\0"+
    "\2\5\1\336\20\5\5\0\13\5\25\0\2\5\1\337"+
    "\2\5\7\0\1\5\1\340\21\5\5\0\13\5\25\0"+
    "\4\5\1\341\7\0\6\5\1\342\14\5\5\0\13\5"+
    "\25\0\5\5\7\0\16\5\1\343\4\5\5\0\13\5"+
    "\25\0\5\5\7\0\15\5\1\344\5\5\5\0\13\5"+
    "\25\0\5\5\7\0\4\5\1\345\16\5\5\0\13\5"+
    "\25\0\4\5\1\346\7\0\23\5\5\0\11\5\1\347"+
    "\1\5\25\0\5\5\7\0\23\5\5\0\13\5\25\0"+
    "\5\5\7\0\13\5\1\350\7\5\5\0\13\5\25\0"+
    "\2\5\1\351\2\5\7\0\23\5\5\0\13\5\25\0"+
    "\5\5\7\0\5\5\1\352\15\5\5\0\13\5\25\0"+
    "\5\5\7\0\13\5\1\353\7\5\5\0\11\5\1\354"+
    "\1\5\25\0\4\5\1\355\7\0\5\5\1\356\15\5"+
    "\10\0\10\357\25\0\5\357\7\0\23\357\17\0\1\360"+
    "\63\0\1\360\5\0\13\5\25\0\5\5\7\0\4\5"+
    "\1\361\16\5\5\0\13\5\25\0\2\5\1\362\2\5"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\7\0\6\5"+
    "\1\363\14\5\5\0\11\5\1\364\1\5\25\0\5\5"+
    "\7\0\4\5\1\365\16\5\5\0\13\5\25\0\5\5"+
    "\7\0\5\5\1\366\1\367\14\5\5\0\13\5\25\0"+
    "\5\5\7\0\16\5\1\370\4\5\5\0\13\5\25\0"+
    "\5\5\7\0\1\5\1\371\21\5\5\0\13\5\25\0"+
    "\1\5\1\372\3\5\7\0\23\5\5\0\13\5\25\0"+
    "\5\5\7\0\14\5\1\373\6\5\5\0\13\5\25\0"+
    "\5\5\7\0\1\374\22\5\5\0\13\5\25\0\5\5"+
    "\7\0\13\5\1\375\7\5\5\0\13\5\25\0\4\5"+
    "\1\376\7\0\23\5\5\0\13\5\25\0\4\5\1\377"+
    "\7\0\5\5\1\u0100\15\5\5\0\13\5\25\0\1\u0101"+
    "\4\5\7\0\23\5\5\0\13\5\25\0\2\5\1\u0102"+
    "\2\5\7\0\23\5\5\0\13\5\25\0\3\5\1\u0103"+
    "\1\5\7\0\23\5\5\0\13\5\25\0\5\5\7\0"+
    "\2\5\1\u0104\20\5\5\0\13\5\25\0\3\5\1\u0105"+
    "\1\5\7\0\23\5\5\0\13\5\25\0\4\5\1\u0106"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\7\0\1\u0107"+
    "\22\5\5\0\13\5\25\0\1\u0108\4\5\7\0\16\5"+
    "\1\u0109\4\5\5\0\11\5\1\u010a\1\5\25\0\5\5"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\7\0\1\5"+
    "\1\u010b\21\5\5\0\13\5\25\0\4\5\1\u010c\7\0"+
    "\23\5\5\0\13\5\25\0\5\5\7\0\6\5\1\u010d"+
    "\14\5\5\0\13\5\25\0\5\5\7\0\13\5\1\u010e"+
    "\7\5\5\0\13\5\25\0\4\5\1\u010f\7\0\23\5"+
    "\5\0\13\5\25\0\4\5\1\u0110\7\0\23\5\5\0"+
    "\13\5\25\0\4\5\1\u0111\7\0\3\5\1\u0112\17\5"+
    "\5\0\1\u0113\12\5\25\0\5\5\7\0\13\5\1\u0114"+
    "\7\5\5\0\13\5\25\0\4\5\1\u0115\7\0\23\5"+
    "\5\0\13\5\25\0\5\5\7\0\4\5\1\u0116\16\5"+
    "\5\0\13\5\25\0\5\5\7\0\1\u0117\12\5\1\u0118"+
    "\7\5\5\0\13\5\25\0\2\5\1\u0119\2\5\7\0"+
    "\23\5\5\0\13\5\25\0\5\5\7\0\10\5\1\u011a"+
    "\12\5\5\0\13\5\25\0\5\5\7\0\5\5\1\u011b"+
    "\15\5\5\0\13\5\25\0\1\u011c\4\5\7\0\21\5"+
    "\1\u011d\1\5\5\0\13\5\25\0\5\5\7\0\2\5"+
    "\1\u011e\20\5\5\0\13\5\25\0\3\5\1\u011f\1\5"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\1\u0120\6\0"+
    "\23\5\5\0\13\5\25\0\5\5\7\0\1\5\1\u0121"+
    "\21\5\5\0\13\5\25\0\3\5\1\u0122\1\5\7\0"+
    "\23\5\5\0\13\5\25\0\5\5\7\0\13\5\1\u0123"+
    "\7\5\5\0\13\5\25\0\5\5\7\0\13\5\1\u0124"+
    "\7\5\5\0\13\5\25\0\5\5\7\0\6\5\1\u0125"+
    "\14\5\5\0\13\5\25\0\1\5\1\u0126\3\5\7\0"+
    "\23\5\5\0\13\5\25\0\5\5\7\0\1\u0127\22\5"+
    "\5\0\13\5\25\0\2\5\1\u0128\2\5\7\0\23\5"+
    "\5\0\13\5\25\0\2\5\1\u0129\2\5\7\0\23\5"+
    "\5\0\13\5\25\0\1\5\1\u012a\3\5\7\0\23\5"+
    "\5\0\13\5\25\0\5\5\7\0\2\5\1\u012b\20\5"+
    "\5\0\13\5\25\0\5\5\7\0\4\5\1\u012c\16\5"+
    "\5\0\13\5\25\0\5\5\7\0\11\5\1\u012d\11\5"+
    "\5\0\13\5\25\0\5\5\7\0\4\5\1\u012e\16\5"+
    "\5\0\13\5\25\0\3\5\1\u012f\1\5\7\0\23\5"+
    "\5\0\13\5\25\0\5\5\7\0\13\5\1\u0130\7\5"+
    "\5\0\13\5\25\0\4\5\1\u0131\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\u0132\15\5\1\u0133\4\5"+
    "\5\0\13\5\25\0\5\5\7\0\4\5\1\u0134\16\5"+
    "\5\0\11\5\1\u0135\1\5\25\0\5\5\7\0\23\5"+
    "\5\0\13\5\25\0\4\5\1\u0136\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\5\5\1\u0137\15\5\5\0"+
    "\13\5\25\0\1\5\1\u0138\3\5\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\5\1\u0139\21\5\5\0"+
    "\13\5\25\0\5\5\7\0\14\5\1\u013a\6\5\5\0"+
    "\13\5\25\0\5\5\7\0\2\5\1\u013b\10\5\1\u013c"+
    "\7\5\5\0\13\5\25\0\5\5\7\0\14\5\1\u013d"+
    "\6\5\5\0\13\5\25\0\5\5\7\0\4\5\1\u013e"+
    "\16\5\5\0\13\5\25\0\5\5\7\0\1\u013f\1\5"+
    "\1\u0140\20\5\5\0\13\5\25\0\5\5\7\0\1\u0141"+
    "\12\5\1\u0142\2\5\1\u0143\4\5\5\0\13\5\25\0"+
    "\5\5\7\0\16\5\1\u0144\4\5\5\0\13\5\25\0"+
    "\5\5\7\0\4\5\1\u0145\13\5\1\u0146\2\5\5\0"+
    "\13\5\25\0\3\5\1\u0147\1\5\7\0\23\5\5\0"+
    "\11\5\1\u0148\1\5\25\0\5\5\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\4\5\1\u0149\16\5\5\0"+
    "\13\5\25\0\5\5\7\0\5\5\1\u014a\15\5\5\0"+
    "\13\5\25\0\3\5\1\u014b\1\5\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\5\1\u014c\21\5\5\0"+
    "\13\5\25\0\3\5\1\u014d\1\5\7\0\23\5\5\0"+
    "\13\5\25\0\1\5\1\u014e\3\5\7\0\23\5\5\0"+
    "\13\5\16\0\1\u014f\6\0\5\5\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\4\5\1\u0150\16\5\5\0"+
    "\13\5\25\0\5\5\7\0\3\5\1\u0151\17\5\5\0"+
    "\13\5\25\0\5\5\7\0\6\5\1\u0152\14\5\5\0"+
    "\13\5\25\0\5\5\7\0\2\5\1\u0153\20\5\5\0"+
    "\13\5\25\0\4\5\1\u0154\7\0\1\u0155\22\5\5\0"+
    "\13\5\25\0\5\5\7\0\11\5\1\u0156\11\5\5\0"+
    "\13\5\25\0\5\5\7\0\16\5\1\u0157\4\5\5\0"+
    "\13\5\25\0\3\5\1\u0158\1\5\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\2\5\1\u0159\20\5\5\0"+
    "\5\5\1\u015a\5\5\25\0\5\5\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\13\5\1\u015b\7\5\5\0"+
    "\13\5\25\0\5\5\7\0\6\5\1\u015c\14\5\5\0"+
    "\13\5\25\0\5\5\7\0\6\5\1\u015d\14\5\5\0"+
    "\13\5\25\0\5\5\7\0\16\5\1\u015e\4\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\u015f\22\5\5\0\13\5"+
    "\25\0\5\5\7\0\13\5\1\u0160\7\5\5\0\13\5"+
    "\25\0\4\5\1\u0161\7\0\23\5\5\0\11\5\1\u0162"+
    "\1\5\25\0\5\5\7\0\23\5\5\0\13\5\25\0"+
    "\1\5\1\u0163\3\5\7\0\23\5\5\0\13\5\25\0"+
    "\5\5\7\0\1\5\1\u0164\21\5\5\0\13\5\25\0"+
    "\4\5\1\u0165\7\0\23\5\5\0\13\5\25\0\5\5"+
    "\7\0\1\u0166\22\5\5\0\13\5\25\0\5\5\7\0"+
    "\4\5\1\u0167\16\5\5\0\13\5\25\0\5\5\7\0"+
    "\4\5\1\u0168\16\5\5\0\13\5\25\0\5\5\7\0"+
    "\1\5\1\u0169\21\5\5\0\13\5\25\0\4\5\1\u016a"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\1\u016b\6\0"+
    "\23\5\5\0\13\5\25\0\2\5\1\u016c\2\5\7\0"+
    "\23\5\5\0\13\5\25\0\5\5\7\0\1\5\1\u016d"+
    "\21\5\5\0\13\5\25\0\5\5\7\0\5\5\1\u016e"+
    "\15\5\5\0\13\5\25\0\5\5\7\0\1\5\1\u016f"+
    "\21\5\5\0\13\5\25\0\3\5\1\u0170\1\5\7\0"+
    "\23\5\5\0\13\5\25\0\2\5\1\u0171\2\5\7\0"+
    "\23\5\5\0\13\5\25\0\5\5\7\0\5\5\1\u0172"+
    "\15\5\5\0\13\5\25\0\5\5\7\0\6\5\1\u0173"+
    "\14\5\5\0\13\5\25\0\4\5\1\u0174\7\0\23\5"+
    "\5\0\13\5\25\0\1\5\1\u0175\3\5\7\0\23\5"+
    "\5\0\13\5\25\0\4\5\1\u0176\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\10\5\1\u0177\12\5\5\0"+
    "\11\5\1\u0178\1\5\25\0\5\5\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\4\5\1\u0179\16\5\5\0"+
    "\13\5\25\0\5\5\7\0\5\5\1\u017a\15\5\5\0"+
    "\13\5\25\0\5\5\7\0\21\5\1\u017b\1\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\5\1\u017c\21\5\5\0"+
    "\13\5\25\0\4\5\1\u017d\7\0\23\5\5\0\13\5"+
    "\25\0\5\5\7\0\13\5\1\u017e\7\5\5\0\13\5"+
    "\25\0\4\5\1\u017f\7\0\23\5\5\0\13\5\25\0"+
    "\4\5\1\u0180\7\0\23\5\5\0\13\5\25\0\4\5"+
    "\1\u0181\7\0\23\5\5\0\13\5\25\0\5\5\7\0"+
    "\13\5\1\u0182\7\5\5\0\13\5\25\0\5\5\7\0"+
    "\1\5\1\u0183\21\5\5\0\13\5\25\0\4\5\1\u0184"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\7\0\13\5"+
    "\1\u0185\7\5\5\0\13\5\25\0\5\5\7\0\1\u0186"+
    "\22\5\5\0\1\u0187\12\5\25\0\5\5\7\0\23\5"+
    "\5\0\13\5\25\0\5\5\7\0\1\5\1\u0188\21\5"+
    "\5\0\13\5\25\0\1\5\1\u0189\3\5\7\0\23\5"+
    "\5\0\13\5\25\0\4\5\1\u018a\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\6\5\1\u018b\14\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\u018c\22\5\5\0\11\5"+
    "\1\u018d\1\5\25\0\5\5\7\0\23\5\5\0\13\5"+
    "\25\0\5\5\7\0\5\5\1\u018e\15\5\5\0\13\5"+
    "\25\0\5\5\7\0\1\5\1\u018f\21\5\5\0\13\5"+
    "\25\0\5\5\7\0\13\5\1\u0190\7\5\5\0\13\5"+
    "\25\0\5\5\7\0\6\5\1\u0191\14\5\5\0\13\5"+
    "\25\0\5\5\7\0\6\5\1\u0192\14\5\5\0\13\5"+
    "\25\0\5\5\7\0\3\5\1\u0193\17\5\5\0\13\5"+
    "\25\0\3\5\1\u0194\1\5\7\0\23\5\5\0\13\5"+
    "\25\0\1\u0195\4\5\7\0\23\5\5\0\13\5\25\0"+
    "\5\5\7\0\13\5\1\u0196\7\5\5\0\13\5\25\0"+
    "\5\5\7\0\13\5\1\u0197\7\5\5\0\13\5\25\0"+
    "\5\5\7\0\13\5\1\u0198\7\5\5\0\13\5\25\0"+
    "\1\5\1\u0199\3\5\7\0\23\5\5\0\13\5\25\0"+
    "\5\5\7\0\4\5\1\u019a\16\5\5\0\13\5\25\0"+
    "\5\5\7\0\1\5\1\u019b\21\5\5\0\13\5\25\0"+
    "\5\5\7\0\13\5\1\u019c\7\5\5\0\13\5\25\0"+
    "\5\5\7\0\5\5\1\u019d\15\5\5\0\13\5\25\0"+
    "\4\5\1\u019e\7\0\23\5\5\0\13\5\25\0\5\5"+
    "\7\0\6\5\1\u019f\14\5\5\0\13\5\25\0\5\5"+
    "\7\0\4\5\1\u01a0\16\5\5\0\1\u01a1\12\5\25\0"+
    "\5\5\7\0\23\5\5\0\13\5\25\0\5\5\7\0"+
    "\3\5\1\u01a2\17\5\5\0\13\5\25\0\5\5\7\0"+
    "\4\5\1\u01a3\16\5\5\0\13\5\25\0\3\5\1\u01a4"+
    "\1\5\7\0\23\5\5\0\13\5\25\0\5\5\7\0"+
    "\6\5\1\u01a5\14\5\5\0\13\5\25\0\4\5\1\u01a6"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\7\0\1\u01a7"+
    "\22\5\5\0\13\5\25\0\5\5\7\0\6\5\1\u01a8"+
    "\14\5\5\0\13\5\25\0\5\5\7\0\4\5\1\u01a9"+
    "\16\5\5\0\13\5\25\0\5\5\7\0\3\5\1\u01aa"+
    "\17\5\5\0\13\5\25\0\5\5\7\0\13\5\1\u01ab"+
    "\7\5\5\0\13\5\25\0\5\5\7\0\5\5\1\u01ac"+
    "\15\5\5\0\13\5\25\0\4\5\1\u01ad\7\0\23\5"+
    "\5\0\13\5\25\0\5\5\7\0\20\5\1\u01ae\2\5"+
    "\5\0\1\u01af\12\5\25\0\5\5\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\5\1\u01b0\21\5\5\0"+
    "\13\5\25\0\5\5\7\0\13\5\1\u01b1\7\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\u01b2\22\5\5\0\13\5"+
    "\25\0\5\5\7\0\1\5\1\u01b3\21\5\5\0\13\5"+
    "\25\0\3\5\1\u01b4\1\5\7\0\23\5\5\0\13\5"+
    "\25\0\5\5\7\0\3\5\1\u01b5\17\5\5\0\13\5"+
    "\25\0\4\5\1\u01b6\7\0\23\5\5\0\13\5\25\0"+
    "\5\5\7\0\1\u01b7\22\5\5\0\13\5\25\0\3\5"+
    "\1\u01b8\1\5\7\0\23\5\5\0\11\5\1\u01b9\1\5"+
    "\25\0\5\5\7\0\23\5\5\0\13\5\25\0\5\5"+
    "\7\0\4\5\1\u01ba\16\5\5\0\13\5\25\0\4\5"+
    "\1\u01bb\7\0\23\5\5\0\13\5\25\0\5\5\7\0"+
    "\20\5\1\u01bc\2\5\5\0\13\5\25\0\5\5\7\0"+
    "\15\5\1\u01bd\5\5\5\0\1\u01be\12\5\25\0\5\5"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\7\0\6\5"+
    "\1\u01bf\14\5\5\0\13\5\25\0\5\5\7\0\13\5"+
    "\1\u01c0\7\5\5\0\13\5\25\0\5\5\7\0\13\5"+
    "\1\u01c1\7\5\5\0\13\5\25\0\1\5\1\u01c2\3\5"+
    "\7\0\23\5\5\0\13\5\25\0\4\5\1\u01c3\7\0"+
    "\23\5\5\0\13\5\25\0\5\5\7\0\1\5\1\u01c4"+
    "\21\5\5\0\1\u01c5\12\5\25\0\5\5\7\0\23\5"+
    "\5\0\13\5\25\0\5\5\7\0\1\5\1\u01c6\21\5"+
    "\5\0\13\5\25\0\3\5\1\u01c7\1\5\7\0\23\5"+
    "\5\0\13\5\25\0\1\5\1\u01c8\3\5\7\0\23\5"+
    "\5\0\13\5\25\0\5\5\7\0\13\5\1\u01c9\7\5"+
    "\5\0\13\5\25\0\5\5\7\0\1\u01ca\22\5\5\0"+
    "\13\5\25\0\4\5\1\u01cb\7\0\23\5\5\0\13\5"+
    "\25\0\5\5\7\0\5\5\1\u01cc\15\5\5\0\13\5"+
    "\25\0\5\5\7\0\6\5\1\u01cd\14\5\5\0\13\5"+
    "\25\0\4\5\1\u01ce\7\0\23\5\5\0\13\5\25\0"+
    "\5\5\7\0\1\5\1\u01cf\21\5\5\0\13\5\25\0"+
    "\5\5\7\0\20\5\1\u01d0\2\5\5\0\11\5\1\u01d1"+
    "\1\5\25\0\5\5\7\0\23\5\5\0\13\5\25\0"+
    "\4\5\1\u01d2\7\0\23\5\5\0\13\5\25\0\5\5"+
    "\7\0\12\5\1\u01d3\10\5\5\0\13\5\25\0\3\5"+
    "\1\u01d4\1\5\7\0\23\5\5\0\13\5\25\0\5\5"+
    "\7\0\20\5\1\u01d5\2\5\5\0\13\5\25\0\5\5"+
    "\7\0\6\5\1\u01d6\14\5\5\0\11\5\1\u01d7\1\5"+
    "\25\0\5\5\7\0\23\5\5\0\13\5\25\0\4\5"+
    "\1\u01d8\7\0\23\5\5\0\1\u01d9\12\5\25\0\5\5"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\7\0\17\5"+
    "\1\u01da\3\5\5\0\13\5\25\0\5\5\7\0\2\5"+
    "\1\u01db\20\5\5\0\13\5\25\0\5\5\7\0\6\5"+
    "\1\u01dc\14\5\5\0\13\5\25\0\5\5\7\0\1\5"+
    "\1\u01dd\21\5\5\0\13\5\25\0\5\5\7\0\3\5"+
    "\1\u01de\17\5\5\0\13\5\25\0\1\5\1\u01df\3\5"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\7\0\5\5"+
    "\1\u01e0\15\5\5\0\13\5\25\0\5\5\7\0\1\5"+
    "\1\u01e1\21\5\5\0\13\5\25\0\5\5\7\0\5\5"+
    "\1\u01e2\15\5\5\0\13\5\25\0\5\5\7\0\1\u01e3"+
    "\22\5\5\0\1\u01e4\12\5\25\0\5\5\7\0\23\5"+
    "\5\0\13\5\25\0\5\5\7\0\2\5\1\u01e5\20\5"+
    "\5\0\13\5\25\0\4\5\1\u01e6\7\0\23\5\5\0"+
    "\13\5\25\0\5\5\7\0\6\5\1\u01e7\14\5\5\0"+
    "\13\5\25\0\5\5\7\0\17\5\1\u01e8\3\5\5\0"+
    "\13\5\25\0\5\5\7\0\6\5\1\u01e9\14\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\5\1\u01ea\21\5\5\0"+
    "\13\5\25\0\5\5\7\0\1\5\1\u01eb\21\5\5\0"+
    "\13\5\25\0\5\5\7\0\3\5\1\u01ec\17\5\5\0"+
    "\13\5\25\0\5\5\7\0\5\5\1\u01ed\15\5\5\0"+
    "\13\5\25\0\5\5\7\0\5\5\1\u01ee\15\5\5\0"+
    "\13\5\25\0\4\5\1\u01ef\7\0\23\5\5\0\13\5"+
    "\25\0\5\5\7\0\14\5\1\u01f0\6\5\5\0\13\5"+
    "\25\0\5\5\7\0\13\5\1\u01f1\7\5\5\0\13\5"+
    "\25\0\2\5\1\u01f2\2\5\7\0\23\5\5\0\13\5"+
    "\25\0\5\5\7\0\17\5\1\u01f3\3\5\5\0\13\5"+
    "\25\0\5\5\7\0\1\5\1\u01f4\21\5\5\0\13\5"+
    "\25\0\1\5\1\u01f5\3\5\7\0\23\5\5\0\13\5"+
    "\25\0\3\5\1\u01f6\1\5\7\0\23\5\5\0\13\5"+
    "\25\0\5\5\7\0\5\5\1\u01f7\15\5\5\0\13\5"+
    "\25\0\5\5\7\0\4\5\1\u01f8\16\5\5\0\13\5"+
    "\25\0\4\5\1\u01f9\7\0\23\5\5\0\13\5\25\0"+
    "\5\5\7\0\14\5\1\u01fa\6\5\5\0\13\5\25\0"+
    "\4\5\1\u01fb\7\0\23\5\5\0\11\5\1\u01fc\1\5"+
    "\25\0\5\5\7\0\23\5\5\0\13\5\25\0\5\5"+
    "\7\0\1\u01fd\22\5\5\0\11\5\1\u01fe\1\5\25\0"+
    "\5\5\7\0\23\5\5\0\13\5\25\0\3\5\1\u01ff"+
    "\1\5\7\0\23\5\5\0\13\5\25\0\5\5\7\0"+
    "\2\5\1\u0200\20\5\5\0\13\5\25\0\5\5\7\0"+
    "\4\5\1\u0201\16\5\5\0\13\5\25\0\5\5\7\0"+
    "\3\5\1\u0202\17\5\5\0\13\5\25\0\4\5\1\u0203"+
    "\7\0\23\5\5\0\13\5\25\0\5\5\7\0\2\5"+
    "\1\u0204\20\5\5\0\13\5\25\0\5\5\7\0\2\5"+
    "\1\u0205\20\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\2\1\2\11\1\1\1\11"+
    "\2\1\1\11\3\1\1\11\14\1\2\11\26\1\3\11"+
    "\2\1\1\11\2\1\4\11\1\1\2\11\2\1\4\11"+
    "\1\1\3\11\14\1\2\11\1\1\4\11\54\1\2\0"+
    "\2\1\11\11\22\1\1\11\10\1\1\11\145\1\1\11"+
    "\56\1\1\11\33\1\1\11\232\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[517];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CrystalLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CrystalLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return STRING;
            }
          case 182: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 183: break;
          case 3: 
            { return LINE_COMMENT;
            }
          case 184: break;
          case 4: 
            { return IDENT;
            }
          case 185: break;
          case 5: 
            { return NUMBER;
            }
          case 186: break;
          case 6: 
            { return BAD_CHARACTER;
            }
          case 187: break;
          case 7: 
            { return LEFT_BRACE;
            }
          case 188: break;
          case 8: 
            { return RIGHT_BRACE;
            }
          case 189: break;
          case 9: 
            { return LEFT_PAREN;
            }
          case 190: break;
          case 10: 
            { return RIGHT_PAREN;
            }
          case 191: break;
          case 11: 
            { return LEFT_BRACKET;
            }
          case 192: break;
          case 12: 
            { return RIGHT_BRACKET;
            }
          case 193: break;
          case 13: 
            { return PIPE;
            }
          case 194: break;
          case 14: 
            { return DOT;
            }
          case 195: break;
          case 15: 
            { return COMMA;
            }
          case 196: break;
          case 16: 
            { return EQUAL;
            }
          case 197: break;
          case 17: 
            { return GREATER;
            }
          case 198: break;
          case 18: 
            { return TILDE;
            }
          case 199: break;
          case 19: 
            { return NOT;
            }
          case 200: break;
          case 20: 
            { return LESS;
            }
          case 201: break;
          case 21: 
            { return PLUS;
            }
          case 202: break;
          case 22: 
            { return MINUS;
            }
          case 203: break;
          case 23: 
            { return TIMES;
            }
          case 204: break;
          case 24: 
            { return DIVIDENTE;
            }
          case 205: break;
          case 25: 
            { return QUESTION;
            }
          case 206: break;
          case 26: 
            { return SEMICOLON;
            }
          case 207: break;
          case 27: 
            { return COLON;
            }
          case 208: break;
          case 28: 
            { return AND;
            }
          case 209: break;
          case 29: 
            { return CAROT;
            }
          case 210: break;
          case 30: 
            { return AT;
            }
          case 211: break;
          case 31: 
            { return P;
            }
          case 212: break;
          case 32: 
            { return OF;
            }
          case 213: break;
          case 33: 
            { return MACRO_STATEMENT_OPEN;
            }
          case 214: break;
          case 34: 
            { return MACRO_BLOCK_OPEN;
            }
          case 215: break;
          case 35: 
            { return MACRO_STATEMENT_CLOSE;
            }
          case 216: break;
          case 36: 
            { return ARRAY;
            }
          case 217: break;
          case 37: 
            { return OR_OR;
            }
          case 218: break;
          case 38: 
            { return OR_EQUAL;
            }
          case 219: break;
          case 39: 
            { return DOT_DOT;
            }
          case 220: break;
          case 40: 
            { return EQUAL_EQUAL;
            }
          case 221: break;
          case 41: 
            { return RIGHT_ARROW;
            }
          case 222: break;
          case 42: 
            { return APROX_ARROW;
            }
          case 223: break;
          case 43: 
            { return BACKSLASH;
            }
          case 224: break;
          case 44: 
            { return GREATER_EQUAL;
            }
          case 225: break;
          case 45: 
            { return GREATER_GREATER;
            }
          case 226: break;
          case 46: 
            { return NOT_EQUAL;
            }
          case 227: break;
          case 47: 
            { return NOT_APROX;
            }
          case 228: break;
          case 48: 
            { return LEFT_ARROW;
            }
          case 229: break;
          case 49: 
            { return INSERT;
            }
          case 230: break;
          case 50: 
            { return PLUS_EQUAL;
            }
          case 231: break;
          case 51: 
            { return MINUS_EQUAL;
            }
          case 232: break;
          case 52: 
            { return MINUS_GREATER;
            }
          case 233: break;
          case 53: 
            { return TIMES_EQUAL;
            }
          case 234: break;
          case 54: 
            { return TIMES_TIMES;
            }
          case 235: break;
          case 55: 
            { return DIVIDENTE_EQUAL;
            }
          case 236: break;
          case 56: 
            { return MACRO_BLOCK_CLOSE;
            }
          case 237: break;
          case 57: 
            { return MODULO_EQUAL;
            }
          case 238: break;
          case 58: 
            { return DO;
            }
          case 239: break;
          case 59: 
            { return NAMESPACE;
            }
          case 240: break;
          case 60: 
            { return AND_EQUAL;
            }
          case 241: break;
          case 61: 
            { return AND_AND;
            }
          case 242: break;
          case 62: 
            { return CAROT_EQUAL;
            }
          case 243: break;
          case 63: 
            { return AT_BRACKET;
            }
          case 244: break;
          case 64: 
            { return DOLLAR_TILDE;
            }
          case 245: break;
          case 65: 
            { return DOLLAR_QUESTION;
            }
          case 246: break;
          case 66: 
            { return AS;
            }
          case 247: break;
          case 67: 
            { return IF;
            }
          case 248: break;
          case 68: 
            { return IN;
            }
          case 249: break;
          case 69: 
            { return OUT;
            }
          case 250: break;
          case 70: 
            { return ARRAY_EQUAL;
            }
          case 251: break;
          case 71: 
            { return ARRAY_BOOL;
            }
          case 252: break;
          case 72: 
            { return OR_OR_EQUAL;
            }
          case 253: break;
          case 73: 
            { return DOT_DOT_DOT;
            }
          case 254: break;
          case 74: 
            { return EQUAL_EQUAL_EQUAL;
            }
          case 255: break;
          case 75: 
            { return GREATER_GREATER_EQUAL;
            }
          case 256: break;
          case 76: 
            { return LEFT_RIGHT_ARROW;
            }
          case 257: break;
          case 77: 
            { return LEFT_LEFT_ARROW;
            }
          case 258: break;
          case 78: 
            { return TIMES_TIMES_EQUAL;
            }
          case 259: break;
          case 79: 
            { return DEF;
            }
          case 260: break;
          case 80: 
            { return LIB;
            }
          case 261: break;
          case 81: 
            { return END;
            }
          case 262: break;
          case 82: 
            { return AND_AND_EQUAL;
            }
          case 263: break;
          case 83: 
            { return ASM;
            }
          case 264: break;
          case 84: 
            { return AS_QUESTION;
            }
          case 265: break;
          case 85: 
            { return SUB;
            }
          case 266: break;
          case 86: 
            { return FOR;
            }
          case 267: break;
          case 87: 
            { return FUN;
            }
          case 268: break;
          case 88: 
            { return NEW;
            }
          case 269: break;
          case 89: 
            { return NIL;
            }
          case 270: break;
          case 90: 
            { return OPEN;
            }
          case 271: break;
          case 91: 
            { return LOOP;
            }
          case 272: break;
          case 92: 
            { return LOAD;
            }
          case 273: break;
          case 93: 
            { return EXEC;
            }
          case 274: break;
          case 94: 
            { return EXIT;
            }
          case 275: break;
          case 95: 
            { return ELSE;
            }
          case 276: break;
          case 96: 
            { return ENUM;
            }
          case 277: break;
          case 97: 
            { return EVAL;
            }
          case 278: break;
          case 98: 
            { return CASE;
            }
          case 279: break;
          case 99: 
            { return CHOP;
            }
          case 280: break;
          case 100: 
            { return SELF;
            }
          case 281: break;
          case 101: 
            { return FORK;
            }
          case 282: break;
          case 102: 
            { return FAIL;
            }
          case 283: break;
          case 103: 
            { return NIL_QUESTION;
            }
          case 284: break;
          case 104: 
            { return RAND;
            }
          case 285: break;
          case 105: 
            { return WARN;
            }
          case 286: break;
          case 106: 
            { return WITH;
            }
          case 287: break;
          case 107: 
            { return WHEN;
            }
          case 288: break;
          case 108: 
            { return TEST;
            }
          case 289: break;
          case 109: 
            { return TRUE;
            }
          case 290: break;
          case 110: 
            { return TRAP;
            }
          case 291: break;
          case 111: 
            { return THEN;
            }
          case 292: break;
          case 112: 
            { return TYPE;
            }
          case 293: break;
          case 113: 
            { return GETS;
            }
          case 294: break;
          case 114: 
            { return GSUB;
            }
          case 295: break;
          case 115: 
            { return PUTC;
            }
          case 296: break;
          case 116: 
            { return PUTS;
            }
          case 297: break;
          case 117: 
            { return PROC;
            }
          case 298: break;
          case 118: 
            { return MACRO;
            }
          case 299: break;
          case 119: 
            { return UNION;
            }
          case 300: break;
          case 120: 
            { return UNTIL;
            }
          case 301: break;
          case 121: 
            { return EXIT_BANG;
            }
          case 302: break;
          case 122: 
            { return ELSIF;
            }
          case 303: break;
          case 123: 
            { return CLASS;
            }
          case 304: break;
          case 124: 
            { return CATCH;
            }
          case 305: break;
          case 125: 
            { return CHOMP;
            }
          case 306: break;
          case 126: 
            { return ALIAS;
            }
          case 307: break;
          case 127: 
            { return ABORT;
            }
          case 308: break;
          case 128: 
            { return SUPER;
            }
          case 309: break;
          case 129: 
            { return SLEEP;
            }
          case 310: break;
          case 130: 
            { return SRAND;
            }
          case 311: break;
          case 131: 
            { return SPAWN;
            }
          case 312: break;
          case 132: 
            { return FALSE;
            }
          case 313: break;
          case 133: 
            { return IS_A_QUESTION;
            }
          case 314: break;
          case 134: 
            { return RAISE;
            }
          case 315: break;
          case 135: 
            { return YIELD;
            }
          case 316: break;
          case 136: 
            { return THROW;
            }
          case 317: break;
          case 137: 
            { return BEGIN;
            }
          case 318: break;
          case 138: 
            { return BREAK;
            }
          case 319: break;
          case 139: 
            { return PRINT;
            }
          case 320: break;
          case 140: 
            { return MODULE;
            }
          case 321: break;
          case 141: 
            { return LAMBDA;
            }
          case 322: break;
          case 142: 
            { return EXTEND;
            }
          case 323: break;
          case 143: 
            { return ENSURE;
            }
          case 324: break;
          case 144: 
            { return CALLER;
            }
          case 325: break;
          case 145: 
            { return CALLCC;
            }
          case 326: break;
          case 146: 
            { return SELECT;
            }
          case 327: break;
          case 147: 
            { return SETTER;
            }
          case 328: break;
          case 148: 
            { return SIZEOF;
            }
          case 329: break;
          case 149: 
            { return SYSTEM;
            }
          case 330: break;
          case 150: 
            { return STRUCT;
            }
          case 331: break;
          case 151: 
            { return FORMAT;
            }
          case 332: break;
          case 152: 
            { return RESCUE;
            }
          case 333: break;
          case 153: 
            { return RETURN;
            }
          case 334: break;
          case 154: 
            { return TYPEOF;
            }
          case 335: break;
          case 155: 
            { return GETTER;
            }
          case 336: break;
          case 156: 
            { return PRINTF;
            }
          case 337: break;
          case 157: 
            { return AT_EXIT;
            }
          case 338: break;
          case 158: 
            { return SYSCALL;
            }
          case 339: break;
          case 159: 
            { return SPRINTF;
            }
          case 340: break;
          case 160: 
            { return INCLUDE;
            }
          case 341: break;
          case 161: 
            { return REQUIRE;
            }
          case 342: break;
          case 162: 
            { return BINDING;
            }
          case 343: break;
          case 163: 
            { return PREPEND;
            }
          case 344: break;
          case 164: 
            { return PRIVATE;
            }
          case 345: break;
          case 165: 
            { return AUTOLOAD;
            }
          case 346: break;
          case 166: 
            { return ABSTRACT;
            }
          case 347: break;
          case 167: 
            { return ITERATOR;
            }
          case 348: break;
          case 168: 
            { return READLINE;
            }
          case 349: break;
          case 169: 
            { return PROPERTY;
            }
          case 350: break;
          case 170: 
            { return READLINES;
            }
          case 351: break;
          case 171: 
            { return TRACE_VAR;
            }
          case 352: break;
          case 172: 
            { return POINTEROF;
            }
          case 353: break;
          case 173: 
            { return PROTECTED;
            }
          case 354: break;
          case 174: 
            { return INITIALIZE;
            }
          case 355: break;
          case 175: 
            { return UNTRACE_VAR;
            }
          case 356: break;
          case 176: 
            { return UNINITIALIZED;
            }
          case 357: break;
          case 177: 
            { return SET_TRACE_FUNC;
            }
          case 358: break;
          case 178: 
            { return LOCAL_VARIABLES;
            }
          case 359: break;
          case 179: 
            { return INSTANCE_SIZEOF;
            }
          case 360: break;
          case 180: 
            { return CALLER_LOCATIONS;
            }
          case 361: break;
          case 181: 
            { return GLOBAL_VARIABLES;
            }
          case 362: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
