/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.kenro.ji.jin.crystal.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static net.kenro.ji.jin.crystal.psi.CrystalElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>src/main/java/net/kenro/ji/jin/crystal/lexer/Crystal.flex</tt>
 */
public class _CrystalLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15136 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\12\1\34\1\35\2\12\1\15\1\36\3\12\1\37\10\12\1\40\1\41\20\12\1\42"+
    "\2\12\1\43\5\12\1\44\4\12\1\45\1\46\1\47\3\12\51\15\1\50\3\15\1\51\1\52\4"+
    "\15\1\53\12\12\1\54\u0381\12");

  /* The ZZ_CMAP_Y table has 2880 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\13"+
    "\13\1\15\1\16\2\13\1\17\11\13\1\20\1\13\1\21\1\22\1\23\1\24\5\1\1\25\2\1\1"+
    "\26\1\27\1\13\1\30\4\13\1\31\10\13\1\32\12\13\1\33\1\13\1\34\1\33\1\13\1\35"+
    "\4\1\1\36\1\37\1\40\2\1\2\36\1\37\1\1\1\41\1\42\5\36\1\43\1\44\1\45\1\1\1"+
    "\46\1\36\1\1\1\47\5\36\1\50\1\51\1\52\1\36\1\37\1\53\1\36\1\54\1\55\1\1\1"+
    "\36\1\56\4\1\1\36\1\57\4\1\1\60\2\36\1\61\1\1\1\62\1\63\1\42\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\63\1\23\1\72\1\65\1\66\1\73\1\1\1\74\1\75\1\76\1\77\1\100"+
    "\1\66\1\101\1\1\1\102\1\63\1\103\1\104\1\65\1\66\1\101\1\1\1\71\1\63\1\51"+
    "\1\105\1\106\1\107\1\110\1\1\1\102\1\75\1\1\1\111\1\46\1\66\1\61\1\1\1\112"+
    "\1\63\1\1\1\111\1\46\1\66\1\113\1\1\1\70\1\63\1\114\1\111\1\46\1\36\1\115"+
    "\1\70\1\116\1\63\1\117\1\120\1\121\1\36\1\122\1\123\1\1\1\75\1\1\1\42\2\36"+
    "\1\124\1\123\1\125\2\1\1\126\1\127\1\130\1\131\1\132\1\133\2\1\1\102\1\1\1"+
    "\125\1\1\1\134\1\36\1\135\1\1\1\136\7\1\2\36\1\37\1\116\1\125\1\137\1\140"+
    "\1\141\1\142\1\125\2\13\1\143\2\36\1\144\24\36\1\145\1\146\2\36\1\145\2\36"+
    "\1\147\1\150\1\151\3\36\1\150\3\36\1\37\2\1\1\36\1\1\5\13\1\152\1\42\45\36"+
    "\1\153\1\36\1\154\1\37\4\36\1\37\1\155\1\156\1\23\1\36\1\23\1\36\1\23\1\156"+
    "\1\102\3\36\1\157\1\1\1\160\1\125\2\1\1\125\5\36\1\161\2\36\1\162\4\36\1\50"+
    "\1\36\1\163\2\1\1\75\1\36\1\164\1\57\2\36\1\165\1\36\1\110\1\125\2\1\1\36"+
    "\1\123\3\36\1\57\2\1\2\125\1\166\5\1\1\120\2\36\1\157\1\167\1\125\2\1\1\170"+
    "\1\36\1\171\1\52\2\36\1\50\1\1\2\36\1\157\1\1\1\172\1\52\1\36\1\164\6\1\1"+
    "\173\1\174\14\13\4\1\21\13\1\152\2\13\1\152\1\175\1\13\1\176\3\177\1\200\1"+
    "\201\1\202\1\203\1\201\1\204\1\1\1\205\2\1\1\206\1\1\1\207\1\1\1\203\6\1\1"+
    "\210\1\211\1\212\1\213\1\214\1\1\2\215\1\216\62\1\1\217\2\215\1\220\161\1"+
    "\2\13\1\221\2\13\1\221\10\13\1\222\1\223\2\13\1\143\3\36\1\224\1\1\1\36\1"+
    "\123\4\225\4\1\1\116\35\1\1\226\2\1\1\227\1\42\4\36\1\230\1\42\4\36\1\144"+
    "\1\120\1\36\1\164\1\42\4\36\1\163\1\1\1\36\1\37\3\1\1\36\40\1\133\36\1\50"+
    "\4\1\135\36\1\50\2\1\10\36\1\135\4\1\2\36\1\164\20\36\1\135\1\36\1\231\1\1"+
    "\2\13\1\232\1\116\1\13\1\176\4\36\1\50\2\1\1\233\1\234\5\13\1\235\1\13\1\176"+
    "\1\35\3\1\1\236\1\237\1\36\1\40\1\1\3\36\1\157\1\240\2\36\1\157\1\1\1\125"+
    "\1\1\1\241\1\52\1\36\1\50\1\36\1\123\1\1\1\36\1\135\1\60\2\36\1\40\1\116\1"+
    "\125\1\242\1\243\2\36\1\56\1\1\1\244\1\125\1\36\1\245\3\36\1\246\1\247\1\250"+
    "\1\37\1\76\1\251\1\252\1\225\2\13\1\253\1\254\5\13\2\36\1\40\1\125\72\36\1"+
    "\157\1\36\1\255\2\36\1\165\20\1\26\36\1\164\6\36\1\110\2\1\1\256\1\257\1\66"+
    "\1\260\1\261\6\36\1\23\1\1\1\170\25\36\1\164\1\1\4\36\1\240\2\36\1\161\2\1"+
    "\1\165\7\1\1\242\7\36\1\135\1\1\1\125\1\33\1\262\1\33\1\262\1\263\4\36\1\163"+
    "\1\264\1\265\2\1\1\266\1\36\1\151\1\267\2\164\2\1\7\36\1\37\30\1\1\36\1\135"+
    "\3\36\1\102\2\1\2\36\1\1\1\36\1\270\2\36\1\50\1\36\1\164\2\36\1\271\3\1\5"+
    "\13\4\36\1\164\1\125\5\1\2\36\1\161\3\36\1\157\11\1\23\36\1\123\1\36\1\50"+
    "\1\161\11\1\1\272\2\36\1\273\1\36\1\50\1\36\1\123\1\36\1\163\4\1\1\36\1\274"+
    "\1\36\1\50\1\36\1\110\4\1\3\36\1\275\4\1\1\102\1\276\1\36\1\157\2\1\1\36\1"+
    "\135\1\36\1\135\2\1\1\134\1\36\1\57\1\1\3\36\1\50\1\36\1\50\1\36\1\40\1\36"+
    "\1\23\6\1\4\36\1\56\3\1\3\13\1\277\3\13\1\277\60\1\1\170\2\36\1\161\2\1\1"+
    "\75\1\1\1\170\2\36\2\1\1\36\1\56\1\125\1\170\1\36\1\123\1\75\1\1\2\36\1\300"+
    "\1\170\2\36\1\40\1\301\1\302\2\1\1\36\1\100\1\165\5\1\1\303\1\304\1\56\2\36"+
    "\1\163\1\1\1\125\1\104\1\65\1\66\1\101\1\1\1\305\1\23\21\1\3\36\1\1\1\306"+
    "\1\125\12\1\2\36\1\163\2\1\1\307\2\1\3\36\1\1\1\310\1\125\2\1\2\36\1\37\1"+
    "\1\1\125\3\1\1\36\1\110\1\1\1\125\26\1\4\13\1\125\1\116\34\1\3\36\1\56\20"+
    "\1\71\36\1\110\16\1\14\36\1\157\53\1\2\36\1\163\75\1\44\36\1\123\33\1\43\36"+
    "\1\56\1\36\1\163\1\125\6\1\1\36\1\164\1\1\3\36\1\1\1\157\1\125\1\170\1\311"+
    "\1\36\67\1\4\36\1\57\1\102\3\1\1\170\6\1\1\23\77\1\6\36\1\37\1\135\1\56\1"+
    "\110\66\1\5\13\1\312\3\13\1\313\1\314\1\315\1\316\3\13\1\317\1\320\1\13\1"+
    "\321\1\322\1\323\24\13\1\324\1\13\1\323\1\253\1\13\1\253\1\13\1\312\1\13\1"+
    "\312\1\221\1\13\1\221\1\13\1\325\1\13\1\325\1\13\1\326\3\327\14\36\1\57\123"+
    "\1\1\330\1\36\1\331\1\332\1\333\1\334\1\335\1\336\1\337\1\165\1\340\1\165"+
    "\47\1\1\215\1\220\1\215\1\220\1\215\1\220\47\1\55\36\1\123\2\1\103\36\1\57"+
    "\15\36\1\164\150\36\1\23\25\1\41\36\1\164\36\1");

  /* The ZZ_CMAP_A table has 3600 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\14\2\15\1\3\22\0\1\1\1\36\1\12\1\2\1\60\1\43\1\55\1\16\1\25\1"+
    "\26\1\41\1\40\1\32\1\17\1\20\1\42\1\21\11\5\1\54\1\53\1\37\1\33\1\34\1\52"+
    "\1\57\6\11\24\7\1\27\1\13\1\30\1\56\1\77\1\0\1\62\1\10\1\61\1\46\1\51\1\64"+
    "\1\75\1\72\1\66\1\7\1\102\1\50\1\44\1\65\1\45\1\76\1\70\1\67\1\63\1\74\1\47"+
    "\1\101\1\71\1\22\1\73\1\100\1\23\1\31\1\24\1\35\6\0\1\15\12\0\1\1\11\0\1\7"+
    "\12\0\1\7\4\0\1\7\5\0\27\7\1\0\23\7\1\4\4\7\4\4\1\7\1\4\2\7\1\4\2\7\1\4\6"+
    "\7\1\4\21\7\1\4\24\7\7\4\2\7\4\0\14\4\16\0\5\7\7\0\1\4\1\0\1\4\6\0\1\6\12"+
    "\0\4\7\1\4\1\0\2\7\2\0\4\7\1\0\1\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0\4\7\1\0\23"+
    "\7\1\0\13\7\10\0\6\7\1\0\26\7\2\0\1\4\6\0\10\7\10\0\33\4\5\0\3\4\15\0\12\5"+
    "\4\0\2\4\1\0\23\4\1\0\1\4\17\0\2\4\7\0\2\4\12\5\3\4\2\0\2\4\1\0\16\4\15\0"+
    "\11\4\13\0\1\4\16\0\12\5\6\4\4\0\2\4\4\0\1\4\5\0\6\4\4\0\1\4\11\0\1\4\3\0"+
    "\1\4\7\0\11\4\7\0\5\4\17\0\26\4\3\0\1\4\2\0\1\4\7\0\12\4\4\0\12\5\1\4\4\0"+
    "\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4\20\0\1\4\15\0\2\4\1"+
    "\0\1\4\5\0\6\4\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4\17\0\4\4\1\0\1\4\7\0\12\5\2"+
    "\0\3\4\20\0\11\4\1\0\3\4\1\0\16\4\1\0\2\4\1\0\5\4\3\0\1\4\2\0\1\4\30\0\1\4"+
    "\13\0\10\4\2\0\1\4\3\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4"+
    "\3\0\2\4\3\0\3\4\3\0\14\4\13\0\10\4\1\0\2\4\10\0\3\4\5\0\4\4\1\0\5\4\3\0\1"+
    "\4\3\0\2\4\15\0\13\4\2\0\1\4\21\0\1\4\12\0\6\4\5\0\22\4\3\0\10\4\1\0\11\4"+
    "\1\0\1\4\2\0\7\4\11\0\1\4\1\0\2\4\14\0\12\5\7\0\2\4\1\0\1\4\2\0\2\4\1\0\1"+
    "\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\0\2\4"+
    "\11\0\1\4\2\0\5\4\1\0\1\4\11\0\12\5\2\0\14\4\1\0\24\4\13\0\5\4\3\0\6\4\4\0"+
    "\4\4\3\0\1\4\3\0\2\4\7\0\3\4\4\0\15\4\14\0\1\4\1\0\6\7\1\0\1\7\5\0\1\7\2\0"+
    "\13\4\1\0\15\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\1\4\1\0\4\4\2\0\7\4\1\0"+
    "\1\4\1\0\4\4\2\0\17\4\1\0\10\4\6\7\2\0\6\7\2\0\15\4\2\0\1\4\1\1\17\4\1\0\10"+
    "\4\7\0\15\4\1\0\6\4\23\0\1\4\4\0\1\4\3\0\10\4\10\0\11\4\1\0\1\4\5\0\17\4\1"+
    "\0\16\4\2\0\14\4\13\0\1\4\15\0\7\4\7\0\16\4\15\0\2\4\12\5\3\0\3\4\11\0\4\4"+
    "\1\0\4\4\3\0\2\4\11\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\17\7\2\0\10\7\10\4"+
    "\5\7\1\0\6\7\1\4\1\0\1\7\3\0\3\7\1\0\6\7\1\4\3\0\4\7\2\0\6\7\4\0\15\7\3\0"+
    "\13\1\15\0\2\15\5\0\1\1\17\0\1\1\1\0\1\7\15\0\1\7\2\0\1\7\4\0\1\7\2\0\12\7"+
    "\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\6\7\4\4\1\7\2\0\4\7\5"+
    "\0\5\7\4\0\1\7\1\0\20\6\3\0\2\7\21\0\24\6\6\0\17\7\1\0\5\7\6\0\4\7\3\0\2\7"+
    "\14\0\10\4\7\0\10\4\1\0\7\4\1\0\1\1\4\0\2\4\12\0\5\4\5\0\2\4\3\0\7\4\6\0\3"+
    "\4\12\5\2\4\4\0\16\7\1\4\10\0\11\4\2\0\26\7\1\4\2\0\4\7\1\4\7\0\1\4\3\7\7"+
    "\4\1\0\3\4\1\0\4\4\1\0\4\4\2\0\16\4\2\0\6\4\3\0\1\4\1\0\1\4\2\0\5\4\1\0\12"+
    "\4\12\5\5\4\1\0\3\4\1\0\10\4\4\0\7\4\3\0\1\4\3\0\2\4\1\0\1\4\3\0\2\4\2\0\5"+
    "\4\2\0\1\4\1\0\1\4\30\0\3\4\3\0\6\4\2\0\6\4\2\0\6\4\11\0\13\7\1\0\12\7\12"+
    "\0\7\4\4\0\5\4\7\7\14\0\5\7\5\0\1\4\1\0\10\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2"+
    "\4\1\0\12\4\13\7\13\0\12\4\2\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4\3\0\14\4\1\0\16"+
    "\4\1\0\2\4\1\0\2\4\1\0\10\4\6\0\4\4\4\0\16\4\2\0\1\4\1\0\14\4\1\0\2\4\3\0"+
    "\1\4\2\0\4\4\1\0\2\4\12\0\10\4\6\0\6\4\1\0\3\4\1\0\7\4\3\7\15\0\3\4\3\0\1"+
    "\4\12\0\4\4\13\0\12\5\1\4\1\0\1\4\3\0\7\4\1\0\1\4\1\0\4\4\1\0\17\4\1\0\2\4"+
    "\14\0\3\4\4\0\2\4\1\0\1\4\20\0\4\4\10\0\1\4\13\0\10\4\5\0\3\4\5\7\1\0\27\7"+
    "\1\0\2\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7\1\0\4\7"+
    "\2\0\10\7\1\0\7\7\1\0\14\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0\7\7\1\0\24\7\2\0\21"+
    "\7\1\0\11\7\1\0\10\7\2\0\22\5\4\4\1\0\13\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0\12"+
    "\4\1\0\4\4\1\0\1\4\1\0\1\4\6\0\1\4\4\0\1\4\1\0\1\4\1\0\1\4\1\0\3\4\1\0\2\4"+
    "\1\0\1\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\2\4\1\0\1\4\2\0\4\4\1"+
    "\0\7\4\1\0\4\4\1\0\4\4\1\0\1\4\1\0\12\4\1\0\5\4\1\0\3\4\1\0\5\4\1\0\5\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\6\1\1"+
    "\1\6\1\7\1\10\1\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\1\6\5\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\1\13\5\1\37\1\0"+
    "\3\5\3\6\1\0\1\40\2\6\1\0\1\6\1\41"+
    "\1\42\1\43\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\3\5\1\67"+
    "\1\5\1\70\11\5\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\6\5\1\100\17\5\1\101\1\102\21\5"+
    "\1\4\3\5\1\0\2\6\1\0\1\6\1\103\1\104"+
    "\1\4\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\2\5\1\115\1\5\1\116\6\5\1\117\4\5"+
    "\1\120\3\5\1\121\11\5\1\122\1\123\1\5\1\124"+
    "\12\5\1\125\1\126\2\5\1\127\1\130\40\5\2\0"+
    "\2\5\1\131\4\5\1\132\1\5\1\133\1\5\1\134"+
    "\1\135\1\5\1\136\1\5\1\137\1\5\1\140\2\5"+
    "\1\141\2\5\1\142\10\5\1\143\12\5\1\144\1\5"+
    "\1\145\1\146\11\5\1\147\1\5\1\150\1\151\1\152"+
    "\1\5\1\153\1\154\1\5\1\155\1\156\1\5\1\157"+
    "\1\5\1\160\1\5\1\161\1\5\1\162\1\163\1\164"+
    "\5\5\1\165\1\5\1\166\2\0\1\5\1\167\1\170"+
    "\1\5\1\171\3\5\1\172\1\5\1\173\1\5\1\174"+
    "\2\5\1\175\1\176\1\177\2\5\1\200\1\5\1\201"+
    "\1\202\4\5\1\203\3\5\1\204\2\5\1\205\1\206"+
    "\10\5\1\207\1\210\1\5\1\211\7\5\1\212\2\5"+
    "\1\213\3\5\1\214\1\215\1\216\1\217\1\220\3\5"+
    "\1\221\1\222\1\5\1\223\1\5\1\224\1\225\1\5"+
    "\1\226\5\5\1\227\1\5\1\230\1\5\1\231\1\5"+
    "\1\232\4\5\1\233\1\5\1\234\6\5\1\235\1\5"+
    "\1\236\1\237\1\240\4\5\1\241\5\5\1\242\1\243"+
    "\4\5\1\244\1\245\3\5\1\246\1\247\4\5\1\250"+
    "\7\5\1\251\1\252\1\5\1\253\1\254\6\5\1\255"+
    "\2\5\1\256\13\5\1\257\7\5\1\260\2\5\1\261"+
    "\1\5\1\262\1\5\1\263\1\264";

  private static int [] zzUnpackAction() {
    int [] result = new int[534];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\103\0\103"+
    "\0\103\0\u03aa\0\103\0\u03ed\0\103\0\u0430\0\u0473\0\103"+
    "\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b"+
    "\0\u06ce\0\u0711\0\u0754\0\u0797\0\103\0\103\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\103"+
    "\0\u0e65\0\u0ea8\0\u0eeb\0\103\0\103\0\103\0\u0f2e\0\u0f71"+
    "\0\103\0\u0fb4\0\u0ff7\0\103\0\u103a\0\103\0\103\0\103"+
    "\0\u107d\0\103\0\103\0\u10c0\0\u1103\0\103\0\103\0\u1146"+
    "\0\103\0\103\0\103\0\u1189\0\u11cc\0\u120f\0\u014f\0\u1252"+
    "\0\u014f\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\u146a\0\u14ad\0\103\0\103\0\u14f0\0\103\0\103\0\103"+
    "\0\103\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u014f"+
    "\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca"+
    "\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u1f25\0\u1f68\0\u0c4d\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7"+
    "\0\u0e22\0\u20fa\0\u0eeb\0\103\0\103\0\u0f71\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\u213d\0\u2180"+
    "\0\u014f\0\u21c3\0\u014f\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312"+
    "\0\u2355\0\u014f\0\u2398\0\u23db\0\u241e\0\u2461\0\u014f\0\u24a4"+
    "\0\u24e7\0\u252a\0\103\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679"+
    "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u014f\0\103\0\u27c8\0\u014f"+
    "\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0"+
    "\0\u2a23\0\u2a66\0\u2aa9\0\u014f\0\u2aec\0\u2b2f\0\u014f\0\u2b72"+
    "\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba"+
    "\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2"+
    "\0\u3415\0\u3458\0\u349b\0\u34de\0\u014f\0\u3521\0\u3564\0\u35a7"+
    "\0\u35ea\0\u014f\0\u362d\0\u014f\0\u3670\0\u014f\0\u36b3\0\u36f6"+
    "\0\u014f\0\u3739\0\u014f\0\u377c\0\u014f\0\u37bf\0\u3802\0\u014f"+
    "\0\u3845\0\u3888\0\u014f\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7"+
    "\0\u3a1a\0\u3a5d\0\u3aa0\0\u014f\0\u3ae3\0\u3b26\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u014f\0\u3d81"+
    "\0\u014f\0\103\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13"+
    "\0\u3f56\0\u3f99\0\u3fdc\0\u014f\0\u401f\0\u014f\0\u014f\0\u014f"+
    "\0\u4062\0\u014f\0\u014f\0\u40a5\0\u014f\0\u014f\0\u40e8\0\u412b"+
    "\0\u416e\0\u014f\0\u41b1\0\u014f\0\u41f4\0\u014f\0\u014f\0\u014f"+
    "\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343\0\u014f\0\u4386\0\u014f"+
    "\0\u43c9\0\u0d9c\0\u440c\0\u014f\0\u014f\0\u444f\0\u014f\0\u4492"+
    "\0\u44d5\0\u4518\0\103\0\u455b\0\u014f\0\u459e\0\u014f\0\u45e1"+
    "\0\u4624\0\u014f\0\u014f\0\u014f\0\u4667\0\u46aa\0\u014f\0\u46ed"+
    "\0\u014f\0\u014f\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u014f\0\u483c"+
    "\0\u487f\0\u48c2\0\u014f\0\u4905\0\u4948\0\u014f\0\103\0\u498b"+
    "\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u014f"+
    "\0\u014f\0\u4ba3\0\u014f\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2"+
    "\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u014f\0\u4e84\0\u4ec7"+
    "\0\u4f0a\0\u014f\0\u014f\0\u014f\0\u4f4d\0\u014f\0\u4f90\0\u4fd3"+
    "\0\u5016\0\u014f\0\u014f\0\u5059\0\u014f\0\u509c\0\u014f\0\u014f"+
    "\0\u50df\0\u014f\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u014f"+
    "\0\u5271\0\u014f\0\u52b4\0\u014f\0\u52f7\0\u014f\0\u533a\0\u537d"+
    "\0\u53c0\0\u5403\0\u014f\0\u5446\0\u014f\0\u5489\0\u54cc\0\u550f"+
    "\0\u5552\0\u5595\0\u55d8\0\u014f\0\u561b\0\u014f\0\u014f\0\u014f"+
    "\0\u565e\0\u56a1\0\u56e4\0\u5727\0\u014f\0\u576a\0\u57ad\0\u57f0"+
    "\0\u5833\0\u5876\0\u014f\0\u014f\0\u58b9\0\u58fc\0\u593f\0\u5982"+
    "\0\u014f\0\u014f\0\u59c5\0\u5a08\0\u5a4b\0\u014f\0\u5a8e\0\u5ad1"+
    "\0\u5b14\0\u5b57\0\u5b9a\0\u014f\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6"+
    "\0\u5ce9\0\u5d2c\0\u5d6f\0\u014f\0\u014f\0\u5db2\0\u014f\0\u014f"+
    "\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01\0\u5f44\0\u014f\0\u5f87"+
    "\0\u5fca\0\u014f\0\u600d\0\u6050\0\u6093\0\u60d6\0\u6119\0\u615c"+
    "\0\u619f\0\u61e2\0\u6225\0\u6268\0\u62ab\0\u014f\0\u62ee\0\u6331"+
    "\0\u6374\0\u63b7\0\u63fa\0\u643d\0\u6480\0\u014f\0\u64c3\0\u6506"+
    "\0\u014f\0\u6549\0\u014f\0\u658c\0\u014f\0\u014f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[534];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\2\1\5\2\6\1\7"+
    "\1\6\1\10\1\11\2\3\1\12\1\13\1\14\1\15"+
    "\1\6\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\6\1\63"+
    "\1\6\1\64\1\65\1\66\1\67\1\2\3\6\104\0"+
    "\1\3\1\0\1\3\10\0\2\3\65\0\3\4\1\0"+
    "\10\4\1\0\66\4\5\0\1\5\12\0\1\70\1\5"+
    "\65\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\22\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\5\6\1\71\7\0\5\6\1\72\1\73\13\6"+
    "\12\74\1\75\1\76\1\77\66\74\13\0\1\100\67\0"+
    "\13\101\1\102\1\103\1\101\1\104\64\101\5\0\1\5"+
    "\13\0\1\5\11\0\1\105\1\106\66\0\1\107\67\0"+
    "\1\5\12\0\1\70\1\5\1\110\123\0\1\111\67\0"+
    "\1\112\103\0\1\113\1\0\1\114\102\0\1\115\1\116"+
    "\1\117\100\0\1\120\1\121\101\0\1\122\1\0\1\123"+
    "\100\0\1\124\3\0\1\125\76\0\1\126\102\0\1\127"+
    "\5\0\1\130\74\0\1\131\73\0\1\132\6\0\1\133"+
    "\53\0\2\6\1\0\3\6\7\0\2\6\21\0\1\6"+
    "\1\134\4\6\7\0\1\6\1\135\20\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\3\6\1\136\2\6"+
    "\7\0\3\6\1\137\11\6\1\140\4\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\1\6\1\141\3\6"+
    "\1\142\7\0\22\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\4\6\1\143\15\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\1\6\1\144"+
    "\4\6\7\0\1\6\1\145\3\6\1\146\14\6\4\0"+
    "\2\6\1\0\3\6\7\0\1\6\1\147\21\0\4\6"+
    "\1\150\1\6\7\0\4\6\1\151\13\6\1\152\1\6"+
    "\54\0\1\153\61\0\1\154\21\0\1\155\60\0\1\156"+
    "\76\0\1\157\110\0\1\160\14\0\1\161\34\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\4\6\1\162\1\6"+
    "\7\0\1\6\1\163\7\6\1\164\10\6\4\0\2\6"+
    "\1\0\1\6\1\165\1\6\7\0\2\6\21\0\3\6"+
    "\1\166\1\167\1\6\7\0\2\6\1\170\10\6\1\171"+
    "\6\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\3\6\1\172\1\173\1\174\7\0\5\6\1\175\1\176"+
    "\3\6\1\177\1\200\1\6\1\201\4\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\1\6\1\202\1\6"+
    "\1\203\2\6\7\0\1\6\1\204\20\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\5\6\1\205\7\0"+
    "\5\6\1\206\14\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\2\6\1\207\1\210\1\211"+
    "\6\6\1\212\6\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\5\6\1\213\7\0\1\6\1\214\20\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\1\6\1\215\3\6\1\216\3\6\1\217\10\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\5\6\1\220\14\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\5\6\1\221\7\0\6\6\1\222"+
    "\2\6\1\223\1\224\7\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\4\6\1\225\1\226\7\0\2\6"+
    "\1\227\17\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\1\6\1\230\1\6\1\231\2\6\7\0\6\6"+
    "\1\232\13\6\5\0\1\233\13\0\1\233\65\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\14\6"+
    "\1\234\5\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\4\6\1\235\15\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\5\6\1\236\7\0"+
    "\22\6\12\74\1\104\1\76\1\77\66\74\12\0\1\237"+
    "\70\0\3\74\1\240\6\74\1\241\1\74\1\0\1\240"+
    "\65\74\12\77\1\104\1\242\67\77\14\101\1\0\1\101"+
    "\1\104\100\101\1\0\1\101\1\243\64\101\16\0\1\244"+
    "\104\0\1\245\67\0\1\246\2\0\2\246\7\0\1\246"+
    "\24\0\1\246\2\0\1\246\7\0\2\246\1\0\1\246"+
    "\51\0\1\247\16\0\1\250\63\0\1\251\102\0\1\252"+
    "\102\0\1\253\103\0\1\254\101\0\1\255\102\0\1\256"+
    "\53\0\2\6\1\0\3\6\7\0\2\6\21\0\2\6"+
    "\1\257\3\6\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\1\260\21\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\13\6\1\261\6\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\5\6\1\262\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\3\6"+
    "\1\263\16\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\5\6\1\264\5\6\1\265\6\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\1\6"+
    "\1\266\4\6\7\0\1\267\1\270\20\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\1\271\5\6\7\0"+
    "\22\6\4\0\2\6\1\0\1\6\1\272\1\6\7\0"+
    "\2\6\21\0\6\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\5\6\1\273\7\0\5\6"+
    "\1\274\5\6\1\275\6\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\2\6\1\276\17\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\2\6"+
    "\1\277\1\300\2\6\7\0\2\6\1\301\17\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\1\6\1\302\20\6\33\0\1\303\53\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\1\6\1\304"+
    "\20\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\4\6\1\305\1\6\7\0\2\6\1\306\10\6\1\307"+
    "\6\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\1\6\1\310\4\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\1\6\1\311\4\6\7\0"+
    "\2\6\1\312\17\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\13\6\1\313\6\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\5\6\1\314\14\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\1\315\5\6\1\316\6\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\16\6\1\317\3\6\4\0\2\6\1\0\1\6\1\320"+
    "\1\6\7\0\2\6\21\0\6\6\7\0\15\6\1\321"+
    "\4\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\5\6\1\322\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\4\6\1\323\1\6\7\0\13\6"+
    "\1\324\6\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\17\6\1\325\2\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\1\6"+
    "\1\326\20\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\2\6\1\327\17\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\6\6"+
    "\1\330\13\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\1\6\1\331\4\6\1\332\13\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\6\6\1\333\13\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\4\6\1\334\15\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\4\6"+
    "\1\335\1\6\7\0\5\6\1\336\14\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\10\6"+
    "\1\337\11\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\4\6\1\340\1\6\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\16\6"+
    "\1\341\3\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\1\342\1\6\1\343\2\6\1\344"+
    "\14\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\5\6\1\345\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\1\6\1\346\1\347"+
    "\4\6\1\350\3\6\1\351\6\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\4\6\1\352"+
    "\1\353\14\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\6\6\1\354\13\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\13\6"+
    "\1\355\6\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\5\6\1\356\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\5\6\1\357\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\2\6\1\360\17\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\3\6\1\361\2\6\7\0\1\6"+
    "\1\362\20\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\5\6\1\363\7\0\6\6\1\364\13\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\15\6\1\365\4\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\1\6\1\366\4\6\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\13\6\1\367\6\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\3\6\1\370\2\6\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\5\6\1\371\14\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\13\6\1\372\6\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\1\6\1\373"+
    "\3\6\1\374\7\0\5\6\1\375\14\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\5\6"+
    "\1\376\14\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\2\6\1\377\3\6\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\1\6"+
    "\1\u0100\20\6\12\237\1\u0101\1\u0102\67\237\12\240\1\104"+
    "\1\240\1\0\66\240\3\77\1\0\10\77\2\0\65\77"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\3\6"+
    "\1\u0103\2\6\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\6\6\1\u0104\13\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\4\6\1\u0105\15\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\1\6\1\u0106\4\6\7\0\4\6"+
    "\1\u0107\15\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\5\6\1\u0108\1\u0109\13\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\15\6\1\u010a\4\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\1\6\1\u010b\20\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\2\6\1\u010c"+
    "\3\6\7\0\22\6\4\0\2\6\1\0\1\6\1\u010d"+
    "\1\6\7\0\2\6\21\0\6\6\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\1\u010e\21\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\13\6\1\u010f\6\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\5\6\1\u0110\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\5\6\1\u0111\7\0\5\6\1\u0112\14\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\1\u0113\5\6\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\3\6\1\u0114\2\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\4\6\1\u0115\1\6\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\2\6\1\u0116\17\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\4\6\1\u0117\1\6\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\5\6\1\u0118\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\1\u0119\21\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\1\u011a\5\6"+
    "\7\0\15\6\1\u011b\4\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\6\6\1\u011c\13\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\13\6\1\u011d\6\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\1\6\1\u011e\4\6\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\1\6\1\u011f\20\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\5\6\1\u0120\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\5\6\1\u0121"+
    "\7\0\22\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\5\6\1\u0122\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\5\6\1\u0123\7\0\3\6"+
    "\1\u0124\16\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\13\6\1\u0125\2\6\1\u0126\3\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\5\6"+
    "\1\u0127\7\0\22\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\4\6\1\u0128\15\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\1\u0129\12\6\1\u012a\6\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\3\6\1\u012b\2\6\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\10\6\1\u012c\11\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\5\6\1\u012d\14\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\1\u012e"+
    "\5\6\7\0\21\6\1\u012f\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\2\6\1\u0130\17\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\4\6"+
    "\1\u0131\1\6\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\1\u0132\6\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\1\6\1\u0133\20\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\4\6\1\u0134\1\6\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\13\6\1\u0135\6\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\13\6\1\u0136\6\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\6\6\1\u0137\13\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\2\6\1\u0138\3\6\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\1\u0139\21\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\3\6\1\u013a\2\6\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\3\6\1\u013b\2\6"+
    "\7\0\22\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\2\6\1\u013c\3\6\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\2\6"+
    "\1\u013d\17\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\4\6\1\u013e\15\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\11\6"+
    "\1\u013f\10\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\4\6\1\u0140\15\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\4\6\1\u0141\1\6"+
    "\7\0\22\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\13\6\1\u0142\6\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\5\6\1\u0143\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\1\u0144\14\6\1\u0145\4\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\4\6"+
    "\1\u0146\15\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\1\6\1\u0147\4\6\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\5\6\1\u0148\7\0"+
    "\22\6\4\0\2\6\1\0\1\6\1\u0149\1\6\7\0"+
    "\2\6\21\0\6\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\2\6\1\u014a"+
    "\10\6\1\u014b\6\6\4\0\2\6\1\0\1\6\1\u014c"+
    "\1\6\7\0\2\6\21\0\6\6\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\4\6\1\u014d\15\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\1\u014e\1\6\1\u014f\17\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\1\u0150\12\6\1\u0151\1\6\1\u0152\4\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\15\6\1\u0153\4\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\4\6\1\u0154\13\6\1\u0155"+
    "\1\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\4\6\1\u0156\15\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\5\6\1\u0157"+
    "\14\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\21\6\1\u0158\12\237\1\u0159\1\u015a\72\237"+
    "\1\0\10\237\2\0\65\237\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\4\6\1\u015b\1\6\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\1\6"+
    "\1\u015c\4\6\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\4\6\1\u015d\15\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\5\6\1\u015e\14\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\4\6\1\u015f\1\6\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\1\6\1\u0160\20\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\4\6\1\u0161\1\6\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\2\6"+
    "\1\u0162\3\6\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\13\0\1\u0163\5\0\6\6\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\4\6\1\u0164\15\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\3\6\1\u0165\16\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\6\6\1\u0166\13\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\2\6\1\u0167\17\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\5\6"+
    "\1\u0168\7\0\1\u0169\21\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\11\6\1\u016a\10\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\15\6\1\u016b\4\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\13\6\1\u016c\6\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\6\6\1\u016d\13\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\4\6\1\u016e\1\6\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\2\6\1\u016f\17\6\4\0\2\6\1\0\3\6"+
    "\7\0\1\6\1\u0170\21\0\6\6\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\6\6\1\u0171\13\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\15\6\1\u0172\4\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\1\u0173\21\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\5\6\1\u0174\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\13\6\1\u0175"+
    "\6\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\1\6\1\u0176\4\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\2\6\1\u0177\3\6\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\1\6\1\u0178\20\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\5\6\1\u0179\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\1\u017a\21\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\4\6\1\u017b\15\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\4\6\1\u017c\15\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\1\6\1\u017d\20\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\5\6\1\u017e"+
    "\7\0\22\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\1\u017f\6\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\3\6\1\u0180\2\6\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\1\6\1\u0181\20\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\5\6\1\u0182"+
    "\14\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\1\6\1\u0183\20\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\4\6\1\u0184\1\6\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\3\6\1\u0185\2\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\5\6\1\u0186"+
    "\14\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\6\6\1\u0187\13\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\5\6\1\u0188\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\2\6"+
    "\1\u0189\3\6\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\5\6\1\u018a\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\10\6\1\u018b\11\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\1\6\1\u018c\4\6\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\1\6\1\u018d\20\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\5\6\1\u018e\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\13\6"+
    "\1\u018f\6\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\5\6\1\u0190\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\5\6\1\u0191\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\5\6"+
    "\1\u0192\7\0\22\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\13\6\1\u0193\6\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\1\6\1\u0194\20\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\4\6\1\u0195\15\6\12\237"+
    "\1\104\1\u015a\67\237\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\5\6\1\u0196\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\13\6"+
    "\1\u0197\6\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\1\u0198\21\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\16\6\1\u0199"+
    "\3\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\1\6\1\u019a\20\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\2\6\1\u019b\3\6\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\5\6\1\u019c\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\6\6\1\u019d\13\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\1\u019e\21\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\1\6\1\u019f\20\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\1\6\1\u01a0"+
    "\4\6\7\0\22\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\5\6\1\u01a1\14\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\13\6\1\u01a2\6\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\6\6\1\u01a3\13\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\6\6\1\u01a4\13\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\3\6\1\u01a5\16\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\4\6\1\u01a6"+
    "\1\6\7\0\22\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\1\u01a7\5\6\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\13\6"+
    "\1\u01a8\6\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\13\6\1\u01a9\6\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\13\6"+
    "\1\u01aa\6\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\2\6\1\u01ab\3\6\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\4\6"+
    "\1\u01ac\15\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\1\6\1\u01ad\20\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\13\6"+
    "\1\u01ae\6\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\5\6\1\u01af\14\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\5\6\1\u01b0\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\6\6\1\u01b1\13\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\4\6\1\u01b2"+
    "\15\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\16\6\1\u01b3\3\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\3\6\1\u01b4"+
    "\16\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\4\6\1\u01b5\1\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\6\6\1\u01b6"+
    "\13\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\5\6\1\u01b7\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\1\u01b8\21\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\6\6\1\u01b9\13\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\4\6\1\u01ba\15\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\3\6\1\u01bb\16\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\13\6\1\u01bc\6\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\14\6\1\u01bd\5\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\5\6\1\u01be\14\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\5\6\1\u01bf"+
    "\7\0\22\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\20\6\1\u01c0\1\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\16\6"+
    "\1\u01c1\3\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\1\u01c2\21\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\1\6\1\u01c3"+
    "\20\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\13\6\1\u01c4\6\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\1\6\1\u01c5"+
    "\20\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\4\6\1\u01c6\1\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\3\6\1\u01c7"+
    "\16\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\5\6\1\u01c8\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\1\u01c9\21\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\4\6\1\u01ca"+
    "\1\6\7\0\22\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\1\6\1\u01cb\4\6\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\4\6\1\u01cc\15\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\5\6\1\u01cd\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\20\6"+
    "\1\u01ce\1\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\16\6\1\u01cf\3\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\6\6"+
    "\1\u01d0\13\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\13\6\1\u01d1\6\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\13\6"+
    "\1\u01d2\6\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\2\6\1\u01d3\3\6\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\5\6\1\u01d4\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\1\6\1\u01d5\20\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\16\6\1\u01d6"+
    "\3\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\1\6\1\u01d7\20\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\4\6\1\u01d8\1\6\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\13\6\1\u01d9\6\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\2\6\1\u01da\3\6\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\1\u01db\21\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\5\6\1\u01dc\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\5\6\1\u01dd\14\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\6\6\1\u01de\13\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\5\6\1\u01df"+
    "\7\0\22\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\1\6\1\u01e0\20\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\20\6"+
    "\1\u01e1\1\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\1\6\1\u01e2\4\6\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\5\6\1\u01e3\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\12\6\1\u01e4\7\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\4\6\1\u01e5\1\6\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\20\6\1\u01e6\1\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\6\6\1\u01e7"+
    "\13\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\1\6\1\u01e8\4\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\5\6\1\u01e9\7\0\22\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\16\6\1\u01ea\3\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\17\6\1\u01eb\2\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\2\6\1\u01ec\17\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\6\6\1\u01ed\13\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\1\6\1\u01ee\20\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\3\6\1\u01ef\16\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\2\6"+
    "\1\u01f0\3\6\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\5\6\1\u01f1\14\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\1\6\1\u01f2\20\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\6\6\7\0\5\6\1\u01f3\14\6"+
    "\4\0\2\6\1\0\3\6\7\0\2\6\21\0\6\6"+
    "\7\0\1\u01f4\21\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\16\6\1\u01f5\3\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\6\6\7\0"+
    "\2\6\1\u01f6\17\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\5\6\1\u01f7\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\6\6"+
    "\1\u01f8\13\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\17\6\1\u01f9\2\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\6\6"+
    "\1\u01fa\13\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\1\6\1\u01fb\20\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\1\6"+
    "\1\u01fc\20\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\3\6\1\u01fd\16\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\5\6"+
    "\1\u01fe\14\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\5\6\1\u01ff\14\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\5\6\1\u0200\7\0"+
    "\22\6\4\0\2\6\1\0\1\6\1\u0201\1\6\7\0"+
    "\2\6\21\0\6\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\13\6\1\u0202"+
    "\6\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\3\6\1\u0203\2\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\17\6\1\u0204"+
    "\2\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\1\6\1\u0205\20\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\2\6\1\u0206\3\6\7\0"+
    "\22\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\4\6\1\u0207\1\6\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\5\6\1\u0208"+
    "\14\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\4\6\1\u0209\15\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\5\6\1\u020a\7\0\22\6"+
    "\4\0\2\6\1\0\1\6\1\u020b\1\6\7\0\2\6"+
    "\21\0\6\6\7\0\22\6\4\0\2\6\1\0\3\6"+
    "\7\0\2\6\21\0\5\6\1\u020c\7\0\22\6\4\0"+
    "\2\6\1\0\3\6\7\0\2\6\21\0\1\6\1\u020d"+
    "\4\6\7\0\22\6\4\0\2\6\1\0\3\6\7\0"+
    "\2\6\21\0\6\6\7\0\1\u020e\21\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\1\6\1\u020f\4\6"+
    "\7\0\22\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\4\6\1\u0210\1\6\7\0\22\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\2\6"+
    "\1\u0211\17\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\6\6\7\0\4\6\1\u0212\15\6\4\0\2\6"+
    "\1\0\3\6\7\0\2\6\21\0\6\6\7\0\3\6"+
    "\1\u0213\16\6\4\0\2\6\1\0\3\6\7\0\2\6"+
    "\21\0\5\6\1\u0214\7\0\22\6\4\0\2\6\1\0"+
    "\3\6\7\0\2\6\21\0\6\6\7\0\2\6\1\u0215"+
    "\17\6\4\0\2\6\1\0\3\6\7\0\2\6\21\0"+
    "\6\6\7\0\2\6\1\u0216\17\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26063];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\3\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\14\1\2\11\21\1\1\0\6\1\1\0"+
    "\1\11\2\1\1\0\3\11\1\1\1\0\1\11\2\1"+
    "\1\11\1\1\3\11\1\1\2\11\2\1\2\11\1\1"+
    "\3\11\17\1\2\11\1\1\4\11\55\1\1\0\2\1"+
    "\1\0\1\1\2\11\1\1\10\11\24\1\1\11\12\1"+
    "\1\11\62\1\2\0\57\1\1\11\46\1\2\0\10\1"+
    "\1\11\33\1\1\11\227\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[534];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CrystalLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CrystalLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 181: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 182: break;
          case 3: 
            { return LINE_COMMENT;
            }
          case 183: break;
          case 4: 
            { return NUMBER_LITERAL;
            }
          case 184: break;
          case 5: 
            { return IDENT;
            }
          case 185: break;
          case 6: 
            { return STRING_LITERAL;
            }
          case 186: break;
          case 7: 
            { return MINUS;
            }
          case 187: break;
          case 8: 
            { return DOT;
            }
          case 188: break;
          case 9: 
            { return LEFT_BRACE;
            }
          case 189: break;
          case 10: 
            { return RIGHT_BRACE;
            }
          case 190: break;
          case 11: 
            { return LEFT_PAREN;
            }
          case 191: break;
          case 12: 
            { return RIGHT_PAREN;
            }
          case 192: break;
          case 13: 
            { return LEFT_BRACKET;
            }
          case 193: break;
          case 14: 
            { return RIGHT_BRACKET;
            }
          case 194: break;
          case 15: 
            { return PIPE;
            }
          case 195: break;
          case 16: 
            { return COMMA;
            }
          case 196: break;
          case 17: 
            { return EQUAL;
            }
          case 197: break;
          case 18: 
            { return GREATER;
            }
          case 198: break;
          case 19: 
            { return TILDE;
            }
          case 199: break;
          case 20: 
            { return NOT;
            }
          case 200: break;
          case 21: 
            { return LESS;
            }
          case 201: break;
          case 22: 
            { return PLUS;
            }
          case 202: break;
          case 23: 
            { return TIMES;
            }
          case 203: break;
          case 24: 
            { return DIVIDENTE;
            }
          case 204: break;
          case 25: 
            { return QUESTION;
            }
          case 205: break;
          case 26: 
            { return SEMICOLON;
            }
          case 206: break;
          case 27: 
            { return COLON;
            }
          case 207: break;
          case 28: 
            { return AND;
            }
          case 208: break;
          case 29: 
            { return CAROT;
            }
          case 209: break;
          case 30: 
            { return AT;
            }
          case 210: break;
          case 31: 
            { return P;
            }
          case 211: break;
          case 32: 
            { return BACKSLASH;
            }
          case 212: break;
          case 33: 
            { return MINUS_EQUAL;
            }
          case 213: break;
          case 34: 
            { return MINUS_GREATER;
            }
          case 214: break;
          case 35: 
            { return DOT_DOT;
            }
          case 215: break;
          case 36: 
            { return MACRO_BLOCK_OPEN;
            }
          case 216: break;
          case 37: 
            { return ARRAY;
            }
          case 217: break;
          case 38: 
            { return OR_OR;
            }
          case 218: break;
          case 39: 
            { return OR_EQUAL;
            }
          case 219: break;
          case 40: 
            { return EQUAL_EQUAL;
            }
          case 220: break;
          case 41: 
            { return RIGHT_ARROW;
            }
          case 221: break;
          case 42: 
            { return APROX_ARROW;
            }
          case 222: break;
          case 43: 
            { return GREATER_EQUAL;
            }
          case 223: break;
          case 44: 
            { return GREATER_GREATER;
            }
          case 224: break;
          case 45: 
            { return NOT_EQUAL;
            }
          case 225: break;
          case 46: 
            { return NOT_APROX;
            }
          case 226: break;
          case 47: 
            { return LEFT_ARROW;
            }
          case 227: break;
          case 48: 
            { return INSERT;
            }
          case 228: break;
          case 49: 
            { return PLUS_EQUAL;
            }
          case 229: break;
          case 50: 
            { return TIMES_EQUAL;
            }
          case 230: break;
          case 51: 
            { return TIMES_TIMES;
            }
          case 231: break;
          case 52: 
            { return DIVIDENTE_EQUAL;
            }
          case 232: break;
          case 53: 
            { return MACRO_BLOCK_CLOSE;
            }
          case 233: break;
          case 54: 
            { return MODULO_EQUAL;
            }
          case 234: break;
          case 55: 
            { return OF;
            }
          case 235: break;
          case 56: 
            { return DO;
            }
          case 236: break;
          case 57: 
            { return NAMESPACE;
            }
          case 237: break;
          case 58: 
            { return AND_EQUAL;
            }
          case 238: break;
          case 59: 
            { return AND_AND;
            }
          case 239: break;
          case 60: 
            { return CAROT_EQUAL;
            }
          case 240: break;
          case 61: 
            { return AT_BRACKET;
            }
          case 241: break;
          case 62: 
            { return DOLLAR_TILDE;
            }
          case 242: break;
          case 63: 
            { return DOLLAR_QUESTION;
            }
          case 243: break;
          case 64: 
            { return AS;
            }
          case 244: break;
          case 65: 
            { return IF;
            }
          case 245: break;
          case 66: 
            { return IN;
            }
          case 246: break;
          case 67: 
            { return CHAR_LITERAL;
            }
          case 247: break;
          case 68: 
            { return DOT_DOT_DOT;
            }
          case 248: break;
          case 69: 
            { return ARRAY_EQUAL;
            }
          case 249: break;
          case 70: 
            { return ARRAY_BOOL;
            }
          case 250: break;
          case 71: 
            { return OR_OR_EQUAL;
            }
          case 251: break;
          case 72: 
            { return EQUAL_EQUAL_EQUAL;
            }
          case 252: break;
          case 73: 
            { return GREATER_GREATER_EQUAL;
            }
          case 253: break;
          case 74: 
            { return LEFT_RIGHT_ARROW;
            }
          case 254: break;
          case 75: 
            { return LEFT_LEFT_ARROW;
            }
          case 255: break;
          case 76: 
            { return TIMES_TIMES_EQUAL;
            }
          case 256: break;
          case 77: 
            { return OUT;
            }
          case 257: break;
          case 78: 
            { return DEF;
            }
          case 258: break;
          case 79: 
            { return LIB;
            }
          case 259: break;
          case 80: 
            { return END;
            }
          case 260: break;
          case 81: 
            { return AND_AND_EQUAL;
            }
          case 261: break;
          case 82: 
            { return ASM;
            }
          case 262: break;
          case 83: 
            { return AS_QUESTION;
            }
          case 263: break;
          case 84: 
            { return SUB;
            }
          case 264: break;
          case 85: 
            { return FOR;
            }
          case 265: break;
          case 86: 
            { return FUN;
            }
          case 266: break;
          case 87: 
            { return NEW;
            }
          case 267: break;
          case 88: 
            { return NIL;
            }
          case 268: break;
          case 89: 
            { return OPEN;
            }
          case 269: break;
          case 90: 
            { return LOOP;
            }
          case 270: break;
          case 91: 
            { return LOAD;
            }
          case 271: break;
          case 92: 
            { return EXEC;
            }
          case 272: break;
          case 93: 
            { return EXIT;
            }
          case 273: break;
          case 94: 
            { return ELSE;
            }
          case 274: break;
          case 95: 
            { return ENUM;
            }
          case 275: break;
          case 96: 
            { return EVAL;
            }
          case 276: break;
          case 97: 
            { return CASE;
            }
          case 277: break;
          case 98: 
            { return CHOP;
            }
          case 278: break;
          case 99: 
            { return SELF;
            }
          case 279: break;
          case 100: 
            { return FORK;
            }
          case 280: break;
          case 101: 
            { return FAIL;
            }
          case 281: break;
          case 102: 
            { return NIL_QUESTION;
            }
          case 282: break;
          case 103: 
            { return RAND;
            }
          case 283: break;
          case 104: 
            { return WARN;
            }
          case 284: break;
          case 105: 
            { return WITH;
            }
          case 285: break;
          case 106: 
            { return WHEN;
            }
          case 286: break;
          case 107: 
            { return TEST;
            }
          case 287: break;
          case 108: 
            { return TRUE;
            }
          case 288: break;
          case 109: 
            { return TRAP;
            }
          case 289: break;
          case 110: 
            { return THEN;
            }
          case 290: break;
          case 111: 
            { return TYPE;
            }
          case 291: break;
          case 112: 
            { return GETS;
            }
          case 292: break;
          case 113: 
            { return GSUB;
            }
          case 293: break;
          case 114: 
            { return PUTC;
            }
          case 294: break;
          case 115: 
            { return PUTS;
            }
          case 295: break;
          case 116: 
            { return PROC;
            }
          case 296: break;
          case 117: 
            { return BEGIN;
            }
          case 297: break;
          case 118: 
            { return BREAK;
            }
          case 298: break;
          case 119: 
            { return MACRO;
            }
          case 299: break;
          case 120: 
            { return UNION;
            }
          case 300: break;
          case 121: 
            { return UNTIL;
            }
          case 301: break;
          case 122: 
            { return EXIT_BANG;
            }
          case 302: break;
          case 123: 
            { return ELSIF;
            }
          case 303: break;
          case 124: 
            { return CLASS;
            }
          case 304: break;
          case 125: 
            { return CATCH;
            }
          case 305: break;
          case 126: 
            { return CHOMP;
            }
          case 306: break;
          case 127: 
            { return ABORT;
            }
          case 307: break;
          case 128: 
            { return ALIAS;
            }
          case 308: break;
          case 129: 
            { return SUPER;
            }
          case 309: break;
          case 130: 
            { return SLEEP;
            }
          case 310: break;
          case 131: 
            { return SRAND;
            }
          case 311: break;
          case 132: 
            { return SPAWN;
            }
          case 312: break;
          case 133: 
            { return FALSE;
            }
          case 313: break;
          case 134: 
            { return IS_A_QUESTION;
            }
          case 314: break;
          case 135: 
            { return RAISE;
            }
          case 315: break;
          case 136: 
            { return YIELD;
            }
          case 316: break;
          case 137: 
            { return THROW;
            }
          case 317: break;
          case 138: 
            { return PRINT;
            }
          case 318: break;
          case 139: 
            { return MODULE;
            }
          case 319: break;
          case 140: 
            { return LAMBDA;
            }
          case 320: break;
          case 141: 
            { return EXTEND;
            }
          case 321: break;
          case 142: 
            { return ENSURE;
            }
          case 322: break;
          case 143: 
            { return CALLER;
            }
          case 323: break;
          case 144: 
            { return CALLCC;
            }
          case 324: break;
          case 145: 
            { return SELECT;
            }
          case 325: break;
          case 146: 
            { return SETTER;
            }
          case 326: break;
          case 147: 
            { return SIZEOF;
            }
          case 327: break;
          case 148: 
            { return SYSTEM;
            }
          case 328: break;
          case 149: 
            { return STRUCT;
            }
          case 329: break;
          case 150: 
            { return FORMAT;
            }
          case 330: break;
          case 151: 
            { return RESCUE;
            }
          case 331: break;
          case 152: 
            { return RETURN;
            }
          case 332: break;
          case 153: 
            { return TYPEOF;
            }
          case 333: break;
          case 154: 
            { return GETTER;
            }
          case 334: break;
          case 155: 
            { return PRINTF;
            }
          case 335: break;
          case 156: 
            { return BINDING;
            }
          case 336: break;
          case 157: 
            { return AT_EXIT;
            }
          case 337: break;
          case 158: 
            { return SYSCALL;
            }
          case 338: break;
          case 159: 
            { return SPRINTF;
            }
          case 339: break;
          case 160: 
            { return INCLUDE;
            }
          case 340: break;
          case 161: 
            { return REQUIRE;
            }
          case 341: break;
          case 162: 
            { return PREPEND;
            }
          case 342: break;
          case 163: 
            { return PRIVATE;
            }
          case 343: break;
          case 164: 
            { return ABSTRACT;
            }
          case 344: break;
          case 165: 
            { return AUTOLOAD;
            }
          case 345: break;
          case 166: 
            { return ITERATOR;
            }
          case 346: break;
          case 167: 
            { return READLINE;
            }
          case 347: break;
          case 168: 
            { return PROPERTY;
            }
          case 348: break;
          case 169: 
            { return READLINES;
            }
          case 349: break;
          case 170: 
            { return TRACE_VAR;
            }
          case 350: break;
          case 171: 
            { return POINTEROF;
            }
          case 351: break;
          case 172: 
            { return PROTECTED;
            }
          case 352: break;
          case 173: 
            { return INITIALIZE;
            }
          case 353: break;
          case 174: 
            { return UNTRACE_VAR;
            }
          case 354: break;
          case 175: 
            { return UNINITIALIZED;
            }
          case 355: break;
          case 176: 
            { return SET_TRACE_FUNC;
            }
          case 356: break;
          case 177: 
            { return LOCAL_VARIABLES;
            }
          case 357: break;
          case 178: 
            { return INSTANCE_SIZEOF;
            }
          case 358: break;
          case 179: 
            { return CALLER_LOCATIONS;
            }
          case 359: break;
          case 180: 
            { return GLOBAL_VARIABLES;
            }
          case 360: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
